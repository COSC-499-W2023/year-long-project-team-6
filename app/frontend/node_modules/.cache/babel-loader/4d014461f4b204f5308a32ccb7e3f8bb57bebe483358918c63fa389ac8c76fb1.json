{"ast":null,"code":"const SignalingClient = require('amazon-kinesis-video-streams-webrtc').SignalingClient;\nconst KVSWebRTC = require('amazon-kinesis-video-streams-webrtc');\n\n// Function to request signaling channel endpoint and ICE server configuration from the server\nasync function getSignalingChannelConfig(channelARN) {\n  const response = await fetch(`http://localhost:5001/getSignalingChannelConfig?channelARN=${encodeURIComponent(channelARN)}`);\n  if (!response.ok) {\n    throw new Error(`Failed to get signaling channel config: ${response.statusText}`);\n  }\n  const config = await response.json();\n  console.log(\"Received config from server:\", config);\n  return config;\n}\nasync function fetchCredentials() {\n  try {\n    const response = await fetch('http://localhost:5001/get-temp-credentials'); // The endpoint on your server\n    if (!response.ok) {\n      throw new Error('Failed to fetch credentials: ' + response.statusText);\n    }\n    const data = await response.json();\n    return {\n      accessKeyId: data.accessKeyId,\n      secretAccessKey: data.secretAccessKey,\n      sessionToken: data.sessionToken\n    };\n  } catch (error) {\n    console.error('Error fetching credentials from server:', error);\n    throw error; // Rethrow the error to handle it in the calling function\n  }\n}\n// Function to create and configure the peer connection\nfunction createPeerConnection(iceServers) {\n  const peerConnectionConfig = {\n    iceServers\n  };\n  const peerConnection = new RTCPeerConnection(peerConnectionConfig);\n  let localStream;\n  navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: true\n  }).then(stream => {\n    localStream = stream;\n    if (peerConnection instanceof RTCPeerConnection) {\n      console.log('peerConnection:', peerConnection);\n      localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));\n    } else {\n      console.error('peerConnection is not an instance of RTCPeerConnection');\n    }\n  }).catch(error => console.error('Error getting local stream', error));\n  return {\n    peerConnection,\n    localStream\n  };\n}\n\n// Main function to initialize WebRTC connection\nexport async function initializeWebRTC(channelARN, localView) {\n  try {\n    const config = await getSignalingChannelConfig(channelARN);\n    const {\n      endpointsByProtocol,\n      iceServers\n    } = config;\n    const credentials = await fetchCredentials();\n    const signalingClient = new SignalingClient({\n      channelARN,\n      channelEndpoint: endpointsByProtocol.WSS,\n      clientId: '23',\n      role: KVSWebRTC.Role.VIEWER,\n      region: 'us-east-1',\n      credentials: {\n        // Use the temporary credentials here\n        accessKeyId: credentials.accessKeyId,\n        secretAccessKey: credentials.secretAccessKey,\n        sessionToken: credentials.sessionToken\n      }\n    });\n    const peerConnection = createPeerConnection(iceServers, localView);\n\n    // Set up signaling client event listeners and peer connection logic\n    // signalingClient.on('open', ...), signalingClient.on('sdpAnswer', ...), etc.\n\n    signalingClient.open();\n    signalingClient.on('open', async () => {\n      // Get a stream from the webcam, add it to the peer connection, and display it in the local view\n      try {\n        const localStream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            width: {\n              ideal: 1280\n            },\n            height: {\n              ideal: 720\n            }\n          },\n          audio: true\n        });\n        localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));\n        localView.srcObject = localStream;\n      } catch (e) {\n        console.error(\"Error getting local stream:\", e);\n        return;\n      }\n\n      // Create an SDP offer and send it to the master\n      const offer = await peerConnection.createOffer({\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: true\n      });\n      await peerConnection.setLocalDescription(offer);\n      signalingClient.sendSdpOffer(peerConnection.localDescription);\n    });\n\n    // When the SDP answer is received back from the master, add it to the peer connection.\n    signalingClient.on('sdpAnswer', async answer => {\n      await peerConnection.setRemoteDescription(answer);\n    });\n\n    // When an ICE candidate is received from the master, add it to the peer connection.\n    signalingClient.on('iceCandidate', candidate => {\n      peerConnection.addIceCandidate(candidate);\n    });\n    return {\n      signalingClient,\n      peerConnection\n    };\n  } catch (error) {\n    console.error('Error initializing WebRTC: ', error);\n  }\n}\nexport function cleanupWebRTC(signalingClient, peerConnection) {\n  console.log(\"webRtc is cleaned\");\n  if (signalingClient) {\n    signalingClient.close();\n  }\n  if (peerConnection) {\n    peerConnection.getSenders().forEach(sender => {\n      if (sender.track) {\n        sender.track.stop();\n      }\n    });\n    peerConnection.close();\n  }\n}","map":{"version":3,"names":["SignalingClient","require","KVSWebRTC","getSignalingChannelConfig","channelARN","response","fetch","encodeURIComponent","ok","Error","statusText","config","json","console","log","fetchCredentials","data","accessKeyId","secretAccessKey","sessionToken","error","createPeerConnection","iceServers","peerConnectionConfig","peerConnection","RTCPeerConnection","localStream","navigator","mediaDevices","getUserMedia","video","audio","then","stream","getTracks","forEach","track","addTrack","catch","initializeWebRTC","localView","endpointsByProtocol","credentials","signalingClient","channelEndpoint","WSS","clientId","role","Role","VIEWER","region","open","on","width","ideal","height","srcObject","e","offer","createOffer","offerToReceiveAudio","offerToReceiveVideo","setLocalDescription","sendSdpOffer","localDescription","answer","setRemoteDescription","candidate","addIceCandidate","cleanupWebRTC","close","getSenders","sender","stop"],"sources":["/Users/xuximin/Desktop/499/year-long-project-team-6/app/frontend/src/pages/webrtc.js"],"sourcesContent":["const SignalingClient = require('amazon-kinesis-video-streams-webrtc').SignalingClient;\nconst KVSWebRTC = require('amazon-kinesis-video-streams-webrtc');\n\n// Function to request signaling channel endpoint and ICE server configuration from the server\nasync function getSignalingChannelConfig(channelARN) {\n    const response = await fetch(`http://localhost:5001/getSignalingChannelConfig?channelARN=${encodeURIComponent(channelARN)}`);\n    if (!response.ok) {\n        throw new Error(`Failed to get signaling channel config: ${response.statusText}`);\n    }\n    const config = await response.json();\nconsole.log(\"Received config from server:\", config);\nreturn config;\n\n}\nasync function fetchCredentials() {\n    try {\n        const response = await fetch('http://localhost:5001/get-temp-credentials');  // The endpoint on your server\n        if (!response.ok) {\n            throw new Error('Failed to fetch credentials: ' + response.statusText);\n        }\n        const data = await response.json();\n        return {\n            accessKeyId: data.accessKeyId,\n            secretAccessKey: data.secretAccessKey,\n            sessionToken: data.sessionToken\n        };\n    } catch (error) {\n        console.error('Error fetching credentials from server:', error);\n        throw error;  // Rethrow the error to handle it in the calling function\n    }\n}\n// Function to create and configure the peer connection\nfunction createPeerConnection(iceServers) {\n    const peerConnectionConfig = { iceServers };\n    const peerConnection = new RTCPeerConnection(peerConnectionConfig);\n    let localStream;\n\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n        .then(stream => {\n            localStream = stream;\n            if (peerConnection instanceof RTCPeerConnection) {\n                console.log('peerConnection:', peerConnection);\n                localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));\n            } else {\n                console.error('peerConnection is not an instance of RTCPeerConnection');\n            }\n        })\n        .catch(error => console.error('Error getting local stream', error));\n\n    return { peerConnection, localStream };\n}\n\n// Main function to initialize WebRTC connection\nexport async function initializeWebRTC(channelARN, localView) {\n    try {\n        const config = await getSignalingChannelConfig(channelARN);\n        const { endpointsByProtocol, iceServers } = config;\n        const credentials = await fetchCredentials();\n        const signalingClient = new SignalingClient({\n            channelARN,\n            channelEndpoint: endpointsByProtocol.WSS,\n            clientId: '23', \n            role: KVSWebRTC.Role.VIEWER,\n            region: 'us-east-1',\n            credentials: {  // Use the temporary credentials here\n                accessKeyId: credentials.accessKeyId,\n                secretAccessKey: credentials.secretAccessKey,\n                sessionToken: credentials.sessionToken\n            }\n        });\n        const peerConnection = createPeerConnection(iceServers, localView);\n\n\n        // Set up signaling client event listeners and peer connection logic\n        // signalingClient.on('open', ...), signalingClient.on('sdpAnswer', ...), etc.\n\n        signalingClient.open();\n        signalingClient.on('open', async () => {\n            // Get a stream from the webcam, add it to the peer connection, and display it in the local view\n            try {\n                const localStream = await navigator.mediaDevices.getUserMedia({\n                    video: { width: { ideal: 1280 }, height: { ideal: 720 } },\n                    audio: true,\n                });\n                localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));\n                localView.srcObject = localStream;\n            } catch (e) {\n                console.error(\"Error getting local stream:\", e);\n                return;\n            }\n        \n            // Create an SDP offer and send it to the master\n            const offer = await peerConnection.createOffer({\n                offerToReceiveAudio: true,\n                offerToReceiveVideo: true,\n            });\n            await peerConnection.setLocalDescription(offer);\n            signalingClient.sendSdpOffer(peerConnection.localDescription);\n        });\n        \n        // When the SDP answer is received back from the master, add it to the peer connection.\n        signalingClient.on('sdpAnswer', async answer => {\n            await peerConnection.setRemoteDescription(answer);\n        });\n        \n        // When an ICE candidate is received from the master, add it to the peer connection.\n        signalingClient.on('iceCandidate', candidate => {\n            peerConnection.addIceCandidate(candidate);\n        });\n        \n        return { signalingClient, peerConnection };\n    } catch (error) {\n        console.error('Error initializing WebRTC: ', error);\n    }\n}\nexport function cleanupWebRTC(signalingClient, peerConnection) {\n    console.log(\"webRtc is cleaned\");\n    if (signalingClient) {\n        signalingClient.close();\n    }\n\n    if (peerConnection) {\n        peerConnection.getSenders().forEach(sender => {\n            if (sender.track) {\n                sender.track.stop();\n            }\n        });\n        peerConnection.close();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}