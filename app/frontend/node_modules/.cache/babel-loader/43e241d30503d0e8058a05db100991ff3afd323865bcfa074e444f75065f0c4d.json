{"ast":null,"code":"const SignalingClient = require('amazon-kinesis-video-streams-webrtc').SignalingClient;\nconst AWS = require('aws-sdk/global');\nconst KinesisVideo = require('aws-sdk/clients/kinesisvideo');\nconst KinesisVideoSignalingChannels = require('aws-sdk/clients/kinesisvideosignalingchannels');\nconst KVSWebRTC = require('amazon-kinesis-video-streams-webrtc');\n\n// Function to initialize AWS Kinesis Video and Signaling Clients\nasync function initializeKinesisVideoClients(channelARN, region, credentials) {\n  const kinesisVideoClient = new KinesisVideo({\n    region,\n    credentials,\n    correctClockSkew: true\n  });\n  const endpointResponse = await kinesisVideoClient.getSignalingChannelEndpoint({\n    ChannelARN: channelARN,\n    SingleMasterChannelEndpointConfiguration: {\n      Protocols: ['WSS', 'HTTPS'],\n      Role: KVSWebRTC.Role.VIEWER\n    }\n  }).promise();\n  const endpointsByProtocol = endpointResponse.ResourceEndpointList.reduce((endpoints, endpoint) => {\n    endpoints[endpoint.Protocol] = endpoint.ResourceEndpoint;\n    return endpoints;\n  }, {});\n  const signalingClient = new SignalingClient({\n    channelARN,\n    channelEndpoint: endpointsByProtocol.WSS,\n    clientId: 'YOUR_CLIENT_ID',\n    // Replace with your client ID\n    role: KVSWebRTC.Role.VIEWER,\n    region,\n    credentials,\n    systemClockOffset: kinesisVideoClient.config.systemClockOffset\n  });\n  return {\n    kinesisVideoClient,\n    signalingClient\n  };\n}\n\n// Function to create and configure the peer connection\nfunction createPeerConnection(signalingClient, localView, remoteView) {\n  const peerConnectionConfig = {\n    iceServers: [{\n      urls: `stun:stun.kinesisvideo.${signalingClient._region}.amazonaws.com:443`\n    }]\n  };\n  const peerConnection = new RTCPeerConnection(peerConnectionConfig);\n\n  // Handle local stream\n  navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: true\n  }).then(localStream => {\n    localView.srcObject = localStream;\n    localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));\n  }).catch(error => console.error('Error getting local stream', error));\n\n  // As remote tracks are received, add them to the remote view\n  peerConnection.addEventListener('track', event => {\n    if (remoteView.srcObject) {\n      return;\n    }\n    remoteView.srcObject = event.streams[0];\n  });\n  return peerConnection;\n}\n\n// Main function to initialize WebRTC connection\nexport async function initializeWebRTC(channelARN, region, credentials, localView, remoteView) {\n  try {\n    const {\n      kinesisVideoClient,\n      signalingClient\n    } = await initializeKinesisVideoClients(channelARN, region, credentials);\n    const peerConnection = createPeerConnection(signalingClient, localView, remoteView);\n\n    // Add additional signalingClient event listeners and peerConnection logic as needed...\n\n    signalingClient.open();\n    return {\n      signalingClient,\n      peerConnection\n    };\n  } catch (error) {\n    console.error('Error initializing WebRTC: ', error);\n  }\n}\nexport function cleanupWebRTC(signalingClient, peerConnection) {\n  // Close the signaling client and peer connection\n  if (signalingClient) {\n    signalingClient.close();\n  }\n  if (peerConnection) {\n    peerConnection.close();\n  }\n}","map":{"version":3,"names":["SignalingClient","require","AWS","KinesisVideo","KinesisVideoSignalingChannels","KVSWebRTC","initializeKinesisVideoClients","channelARN","region","credentials","kinesisVideoClient","correctClockSkew","endpointResponse","getSignalingChannelEndpoint","ChannelARN","SingleMasterChannelEndpointConfiguration","Protocols","Role","VIEWER","promise","endpointsByProtocol","ResourceEndpointList","reduce","endpoints","endpoint","Protocol","ResourceEndpoint","signalingClient","channelEndpoint","WSS","clientId","role","systemClockOffset","config","createPeerConnection","localView","remoteView","peerConnectionConfig","iceServers","urls","_region","peerConnection","RTCPeerConnection","navigator","mediaDevices","getUserMedia","video","audio","then","localStream","srcObject","getTracks","forEach","track","addTrack","catch","error","console","addEventListener","event","streams","initializeWebRTC","open","cleanupWebRTC","close"],"sources":["/Users/xuximin/Desktop/499/year-long-project-team-6/app/frontend/src/pages/webrtc.js"],"sourcesContent":["const SignalingClient = require('amazon-kinesis-video-streams-webrtc').SignalingClient;\nconst AWS = require('aws-sdk/global');\nconst KinesisVideo = require('aws-sdk/clients/kinesisvideo');\nconst KinesisVideoSignalingChannels = require('aws-sdk/clients/kinesisvideosignalingchannels');\nconst KVSWebRTC = require('amazon-kinesis-video-streams-webrtc');\n\n// Function to initialize AWS Kinesis Video and Signaling Clients\nasync function initializeKinesisVideoClients(channelARN, region, credentials) {\n    const kinesisVideoClient = new KinesisVideo({\n        region,\n        credentials,\n        correctClockSkew: true,\n    });\n\n    const endpointResponse = await kinesisVideoClient.getSignalingChannelEndpoint({\n        ChannelARN: channelARN,\n        SingleMasterChannelEndpointConfiguration: {\n            Protocols: ['WSS', 'HTTPS'],\n            Role: KVSWebRTC.Role.VIEWER,\n        },\n    }).promise();\n\n    const endpointsByProtocol = endpointResponse.ResourceEndpointList.reduce((endpoints, endpoint) => {\n        endpoints[endpoint.Protocol] = endpoint.ResourceEndpoint;\n        return endpoints;\n    }, {});\n\n    const signalingClient = new SignalingClient({\n        channelARN,\n        channelEndpoint: endpointsByProtocol.WSS,\n        clientId: 'YOUR_CLIENT_ID', // Replace with your client ID\n        role: KVSWebRTC.Role.VIEWER,\n        region,\n        credentials,\n        systemClockOffset: kinesisVideoClient.config.systemClockOffset,\n    });\n\n    return { kinesisVideoClient, signalingClient };\n}\n\n// Function to create and configure the peer connection\nfunction createPeerConnection(signalingClient, localView, remoteView) {\n    const peerConnectionConfig = {\n        iceServers: [{ urls: `stun:stun.kinesisvideo.${signalingClient._region}.amazonaws.com:443` }]\n    };\n    const peerConnection = new RTCPeerConnection(peerConnectionConfig);\n\n    // Handle local stream\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n        .then(localStream => {\n            localView.srcObject = localStream;\n            localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));\n        })\n        .catch(error => console.error('Error getting local stream', error));\n\n    // As remote tracks are received, add them to the remote view\n    peerConnection.addEventListener('track', event => {\n        if (remoteView.srcObject) {\n            return;\n        }\n        remoteView.srcObject = event.streams[0];\n    });\n\n    return peerConnection;\n}\n\n// Main function to initialize WebRTC connection\nexport async function initializeWebRTC(channelARN, region, credentials, localView, remoteView) {\n    try {\n        const { kinesisVideoClient, signalingClient } = await initializeKinesisVideoClients(channelARN, region, credentials);\n        const peerConnection = createPeerConnection(signalingClient, localView, remoteView);\n\n        // Add additional signalingClient event listeners and peerConnection logic as needed...\n\n        signalingClient.open();\n\n        return { signalingClient, peerConnection };\n    } catch (error) {\n        console.error('Error initializing WebRTC: ', error);\n    }\n}\n\nexport function cleanupWebRTC(signalingClient, peerConnection) {\n    // Close the signaling client and peer connection\n    if (signalingClient) {\n        signalingClient.close();\n    }\n    if (peerConnection) {\n        peerConnection.close();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}