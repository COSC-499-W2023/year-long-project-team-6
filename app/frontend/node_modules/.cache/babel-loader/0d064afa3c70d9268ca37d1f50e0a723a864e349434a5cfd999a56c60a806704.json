{"ast":null,"code":"const SignalingClient = require('amazon-kinesis-video-streams-webrtc').SignalingClient;\nconst KVSWebRTC = require('amazon-kinesis-video-streams-webrtc');\n\n// Function to request signaling channel endpoint and ICE server configuration from the server\nasync function getSignalingChannelConfig(channelARN) {\n  const response = await fetch(`http://localhost:5001/getSignalingChannelConfig?channelARN=${encodeURIComponent(channelARN)}`);\n  const config = await response.json();\n  console.log('Signaling Channel Config:', config);\n  if (!response.ok) {\n    throw new Error(`Failed to get signaling channel config: ${response.statusText}`);\n  }\n  return response.json();\n}\n\n// Function to create and configure the peer connection\nfunction createPeerConnection(iceServers, localView, remoteView) {\n  const peerConnectionConfig = {\n    iceServers\n  };\n  const peerConnection = new RTCPeerConnection(peerConnectionConfig);\n\n  // Handle local stream\n  navigator.mediaDevices.getUserMedia({\n    video: true,\n    audio: true\n  }).then(localStream => {\n    localView.srcObject = localStream;\n    localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));\n  }).catch(error => console.error('Error getting local stream', error));\n\n  // As remote tracks are received, add them to the remote view\n  peerConnection.addEventListener('track', event => {\n    if (remoteView.srcObject) {\n      return;\n    }\n    remoteView.srcObject = event.streams[0];\n  });\n  return peerConnection;\n}\n\n// Main function to initialize WebRTC connection\nexport async function initializeWebRTC(channelARN, localView, remoteView) {\n  try {\n    const config = await getSignalingChannelConfig(channelARN);\n    const {\n      endpointsByProtocol,\n      iceServers\n    } = config;\n    const signalingClient = new SignalingClient({\n      channelARN,\n      channelEndpoint: endpointsByProtocol.WSS,\n      clientId: '23',\n      // Replace with your client ID\n      role: KVSWebRTC.Role.VIEWER,\n      region: 'us-east-1'\n    });\n    const peerConnection = createPeerConnection(iceServers, localView, remoteView);\n\n    // Set up signaling client event listeners and peer connection logic\n    // signalingClient.on('open', ...), signalingClient.on('sdpAnswer', ...), etc.\n\n    signalingClient.open();\n    console.log('Signaling Client and Peer Connection created');\n    return {\n      signalingClient,\n      peerConnection\n    };\n  } catch (error) {\n    console.error('Error initializing WebRTC: ', error);\n  }\n}\nexport function cleanupWebRTC(signalingClient, peerConnection) {\n  if (signalingClient) {\n    signalingClient.close();\n  }\n  if (peerConnection) {\n    peerConnection.close();\n  }\n}","map":{"version":3,"names":["SignalingClient","require","KVSWebRTC","getSignalingChannelConfig","channelARN","response","fetch","encodeURIComponent","config","json","console","log","ok","Error","statusText","createPeerConnection","iceServers","localView","remoteView","peerConnectionConfig","peerConnection","RTCPeerConnection","navigator","mediaDevices","getUserMedia","video","audio","then","localStream","srcObject","getTracks","forEach","track","addTrack","catch","error","addEventListener","event","streams","initializeWebRTC","endpointsByProtocol","signalingClient","channelEndpoint","WSS","clientId","role","Role","VIEWER","region","open","cleanupWebRTC","close"],"sources":["/Users/xuximin/Desktop/499/year-long-project-team-6/app/frontend/src/pages/webrtc.js"],"sourcesContent":["const SignalingClient = require('amazon-kinesis-video-streams-webrtc').SignalingClient;\nconst KVSWebRTC = require('amazon-kinesis-video-streams-webrtc');\n\n// Function to request signaling channel endpoint and ICE server configuration from the server\nasync function getSignalingChannelConfig(channelARN) {\n    const response = await fetch(`http://localhost:5001/getSignalingChannelConfig?channelARN=${encodeURIComponent(channelARN)}`);\n    const config = await response.json();\nconsole.log('Signaling Channel Config:', config);\n    if (!response.ok) {\n        throw new Error(`Failed to get signaling channel config: ${response.statusText}`);\n    }\n    return response.json();\n}\n\n// Function to create and configure the peer connection\nfunction createPeerConnection(iceServers, localView, remoteView) {\n    const peerConnectionConfig = {\n        iceServers\n    };\n    const peerConnection = new RTCPeerConnection(peerConnectionConfig);\n\n    // Handle local stream\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n        .then(localStream => {\n            localView.srcObject = localStream;\n            localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));\n        })\n        .catch(error => console.error('Error getting local stream', error));\n\n    // As remote tracks are received, add them to the remote view\n    peerConnection.addEventListener('track', event => {\n        if (remoteView.srcObject) {\n            return;\n        }\n        remoteView.srcObject = event.streams[0];\n    });\n\n    return peerConnection;\n}\n\n// Main function to initialize WebRTC connection\nexport async function initializeWebRTC(channelARN, localView, remoteView) {\n    try {\n        const config = await getSignalingChannelConfig(channelARN);\n        const { endpointsByProtocol, iceServers } = config;\n\n        const signalingClient = new SignalingClient({\n            channelARN,\n            channelEndpoint: endpointsByProtocol.WSS,\n            clientId: '23', // Replace with your client ID\n            role: KVSWebRTC.Role.VIEWER,\n            region: 'us-east-1', \n        });\n\n        const peerConnection = createPeerConnection(iceServers, localView, remoteView);\n\n        // Set up signaling client event listeners and peer connection logic\n        // signalingClient.on('open', ...), signalingClient.on('sdpAnswer', ...), etc.\n\n        signalingClient.open();\n        console.log('Signaling Client and Peer Connection created');\n        return { signalingClient, peerConnection };\n    } catch (error) {\n        console.error('Error initializing WebRTC: ', error);\n    }\n}\nexport function cleanupWebRTC(signalingClient, peerConnection) {\n    if (signalingClient) {\n        signalingClient.close();\n    }\n    if (peerConnection) {\n        peerConnection.close();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}