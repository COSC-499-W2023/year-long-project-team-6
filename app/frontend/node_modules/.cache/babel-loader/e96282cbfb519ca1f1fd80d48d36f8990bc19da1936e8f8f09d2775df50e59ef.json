{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\17321\\\\OneDrive\\\\\\u684C\\u9762\\\\year-long-project-team-6\\\\app\\\\frontend\\\\src\\\\pages\\\\Post.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport \"../component/CSS/post.css\";\nimport { initializeWebRTC, cleanupWebRTC } from './webrtc';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction PostPage() {\n  _s();\n  var _location$state;\n  const [showWebRTC, setShowWebRTC] = useState(false);\n  const [userId, setUserId] = useState(\"\");\n  const [selectedGroup, setSelectedGroup] = useState(\"\");\n  const [postHistory, setPostHistory] = useState([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const signalingClientRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const localView = useRef(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [recordedChunks, setRecordedChunks] = useState([]);\n  const navigate = useNavigate();\n  const [isRecordingStopped, setIsRecordingStopped] = useState(false);\n  const [recordedVideo, setRecordedVideo] = useState(null);\n  const [blurFace, setBlurFace] = useState(false);\n  const [groups, setGroups] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const groupIdFromState = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.groupId;\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const [fakeProgress, setFakeProgress] = useState(0);\n  const channelARN = 'arn:aws:kinesisvideo:us-east-1:466618866658:channel/webrtc-499/1701571372732';\n  useEffect(() => {\n    const sessionUser = sessionStorage.getItem('user');\n    console.log(\"Sessopm User: \" + sessionUser);\n    if (!sessionUser) {\n      navigate('/login');\n    } else {\n      const user = JSON.parse(sessionUser);\n      setUserId(user.userid);\n      console.log(\"User Id: \" + user.userid);\n    }\n  }, []);\n  useEffect(() => {\n    if (userId) {\n      fetch(`http://localhost:5001/post-history/${userId}`).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      }).then(data => {\n        const arr = [];\n        for (let i in data) {\n          let o = {};\n          o[i] = data[i];\n          arr.push(o);\n        }\n        console.log(arr[0].data);\n        setPostHistory(arr[0].data);\n      }).catch(error => console.error('Error fetching post history:', error));\n\n      // Fetch groups\n      fetch(`http://localhost:5001/user-groups/${userId}`).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok for fetching user groups');\n        }\n        return response.json();\n      }).then(groupsData => {\n        setGroups(groupsData);\n        const selectedGroupFromState = groupsData.find(group => group.groupid == groupIdFromState);\n        console.log(selectedGroupFromState);\n        if (selectedGroupFromState) {\n          setSelectedGroup(selectedGroupFromState.groupid);\n        }\n      }).catch(error => console.error('Error fetching user groups:', error));\n    }\n  }, [userId]);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setIsLoading(true);\n    setIsSubmitting(true);\n    const formData = new FormData(event.target);\n    const postTitle = formData.get('post_title').trim();\n    const postText = formData.get('post_text').trim();\n    const groupid = formData.get('groupid');\n    let videoKey = '';\n    if (!postTitle || !postText || !groupid || groupid === \"\") {\n      setIsLoading(false);\n      setIsSubmitting(false);\n      alert('Please ensure all fields are filled out correctly.');\n      return;\n    }\n    if (recordedVideo) {\n      try {\n        const uploadResult = await uploadVideoWithProgress(recordedVideo, postTitle, progressEvent => {\n          const progress = progressEvent.loaded / progressEvent.total * 100;\n          setProgress(progress);\n        });\n        videoKey = uploadResult.key;\n        console.log('Video uploaded successfully');\n        const postData = {\n          post_title: postTitle,\n          post_text: postText,\n          s3_content_key: videoKey,\n          userid: userId,\n          blurFace: blurFace,\n          group_id: selectedGroup\n        };\n        fetch('http://localhost:5001/add-post', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(postData)\n        }).then(response => {\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n          return response.text();\n        }).then(data => {\n          console.log('Success:', data);\n          navigate('/');\n        }).catch(error => {\n          console.error('Error:', error);\n        }).finally(() => {\n          setIsLoading(false);\n          setIsSubmitting(false);\n        });\n\n        // Cleanup WebRTC after successful navigation\n        if (signalingClientRef.current || peerConnectionRef.current) {\n          cleanupWebRTC(signalingClientRef.current, peerConnectionRef.current);\n          signalingClientRef.current = null;\n          peerConnectionRef.current = null;\n        }\n        setShowWebRTC(false);\n        setIsPlaying(false);\n      } catch (uploadError) {\n        console.error('Failed to upload video:', uploadError);\n        setIsLoading(false);\n        setIsSubmitting(false);\n        alert('Failed to upload video.');\n      }\n    } else {\n      setIsLoading(false);\n      setIsSubmitting(false);\n      alert('Please record your video.');\n    }\n  };\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setFakeProgress(prevProgress => {\n        if (prevProgress < 90) {\n          return prevProgress + 1;\n        }\n        clearInterval(timer);\n        return prevProgress;\n      });\n    }, 100);\n    return () => clearInterval(timer);\n  }, [isSubmitting]);\n\n  // const uploadVideoWithProgress = (videoBlob, title, onProgress) => {\n  //     return new Promise((resolve, reject) => {\n  //         const xhr = new XMLHttpRequest();\n  //         const formData = new FormData();\n  //         formData.append('video', videoBlob, `${title}.webm`);\n\n  //         xhr.open('POST', 'http://localhost:5001/upload-video', true);\n\n  //         xhr.upload.onprogress = (event) => {\n  //             if (event.lengthComputable) {\n  //                 onProgress(event);\n  //             }\n  //         };\n\n  //         xhr.onload = () => {\n  //             if (xhr.status === 200) {\n  //                 resolve(JSON.parse(xhr.responseText));\n  //             } else {\n  //                 reject('Upload failed with status: ' + xhr.status);\n  //             }\n  //         };\n\n  //         xhr.onerror = () => reject(xhr.statusText);\n\n  //         xhr.send(formData);\n  //     });\n  // };\n\n  const handleSortChange = event => {\n    const sortOrder = event.target.value;\n    setPostHistory(prevHistory => {\n      return [...prevHistory].sort((a, b) => {\n        const dateA = new Date(a.post_date);\n        const dateB = new Date(b.post_date);\n        return sortOrder === 'Asc' ? dateA - dateB : dateB - dateA;\n      });\n    });\n  };\n  useEffect(() => {\n    console.log('recordedChunks updated:', recordedChunks);\n  }, [recordedChunks]);\n  let tempRecordedChunks = [];\n  const handleTogglePlay = async () => {\n    console.log('Click - isPlaying:', isPlaying, 'Refs:', localView.current);\n    if (!isPlaying) {\n      console.log(localView.current);\n      setTimeout(async () => {\n        if (localView.current) {\n          try {\n            const webrtc = await initializeWebRTC(channelARN, localView.current);\n            signalingClientRef.current = webrtc.signalingClient;\n            peerConnectionRef.current = webrtc.peerConnection;\n            const stream = localView.current.srcObject;\n            console.log('stream', stream);\n            const recorder = new MediaRecorder(stream);\n            setMediaRecorder(recorder);\n            recorder.ondataavailable = event => {\n              if (event.data.size > 0) {\n                tempRecordedChunks.push(event.data);\n              }\n            };\n            recorder.onstop = async () => {\n              const blob = new Blob(tempRecordedChunks, {\n                type: 'video/webm'\n              });\n              setRecordedVideo(blob);\n              tempRecordedChunks = [];\n            };\n            setShowWebRTC(true);\n            recorder.start();\n          } catch (error) {\n            console.error('Error initializing WebRTC: ', error);\n          }\n        } else {\n          console.log('Refs are not set:', localView.current);\n        }\n      }, 100);\n    } else {\n      if (mediaRecorder) {\n        mediaRecorder.stop();\n      }\n      cleanupWebRTC(signalingClientRef.current, peerConnectionRef.current);\n      signalingClientRef.current = null;\n      peerConnectionRef.current = null;\n      setShowWebRTC(false);\n    }\n    setIsPlaying(!isPlaying);\n  };\n  const handleClear = () => {\n    // Reset form fields\n    document.getElementById(\"postform\").reset();\n    // Stop recording if it's in progress\n    if (isPlaying && mediaRecorder && mediaRecorder.state !== \"inactive\") {\n      mediaRecorder.stop();\n    }\n\n    // Reset all relevant states to their initial values\n    setShowWebRTC(false);\n    setIsPlaying(false);\n    setIsRecordingStopped(false);\n    setRecordedVideo(null);\n    setBlurFace(false);\n\n    // Cleanup WebRTC if needed\n    if (signalingClientRef.current || peerConnectionRef.current) {\n      cleanupWebRTC(signalingClientRef.current, peerConnectionRef.current);\n      signalingClientRef.current = null;\n      peerConnectionRef.current = null;\n    }\n\n    // Clear recorded video URL to avoid memory leaks\n    if (recordedVideo) {\n      URL.revokeObjectURL(recordedVideo);\n    }\n  };\n  function handleGroupChange(event) {\n    setSelectedGroup(event.target.value);\n  }\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    return date.toISOString().split('T')[0];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"send\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Send Your Post \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"input\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          id: \"postform\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"main\",\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"videoContainer\",\n              children: [isPlaying && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(\"video\", {\n                  ref: localView,\n                  style: {\n                    width: '640px'\n                  },\n                  autoPlay: true,\n                  playsInline: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 322,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false), recordedVideo ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"video\", {\n                  style: {\n                    width: '640px'\n                  },\n                  controls: true,\n                  children: /*#__PURE__*/_jsxDEV(\"source\", {\n                    src: URL.createObjectURL(recordedVideo),\n                    type: \"video/webm\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 329,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 328,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 327,\n                columnNumber: 37\n              }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                id: \"record_button\",\n                type: \"button\",\n                onClick: handleTogglePlay,\n                children: isPlaying ? 'Stop' : 'Start Recording'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"EnterText\",\n              id: \"text_one\",\n              children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n                children: \"Name your new video\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"VName\",\n                placeholder: \"Video Name\",\n                name: \"post_title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 341,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"EnterText\",\n              id: \"text_two\",\n              children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n                children: \"Description of Your Video\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"Description\",\n                placeholder: \"Describe your video\",\n                name: \"post_text\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 345,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"group\",\n              children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n                children: \"Choose a Group\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"GName\",\n                name: \"groupid\",\n                value: selectedGroup,\n                onChange: handleGroupChange,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Choose a group\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 350,\n                  columnNumber: 37\n                }, this), groups.map(group => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: group.groupid,\n                  children: group.groupname\n                }, group.groupname, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 352,\n                  columnNumber: 41\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"blur\",\n            children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n              children: \"BlurFace\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"blurFace\",\n              checked: blurFace,\n              onChange: e => setBlurFace(e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 25\n          }, this), !isSubmitting ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              value: \"Submit\",\n              name: \"submit\",\n              id: \"submit\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              onClick: handleClear,\n              id: \"submit\",\n              children: \"Clear\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: progress < 100 ? \"Uploading...\" : \"Processing...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n              value: progress,\n              max: \"100\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"HistroyBar\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          id: \"histroyTable\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"History\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 389,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                id: \"Sort\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"order\",\n                  name: \"order\",\n                  onChange: handleSortChange,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"Des\",\n                    children: \"Descending\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 392,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"Asc\",\n                    children: \"Ascending\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 393,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 391,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: postHistory.map((post, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                id: \"img\",\n                children: `${post.post_title}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                id: \"date\",\n                children: formatDate(post.post_date)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 311,\n    columnNumber: 9\n  }, this);\n}\n_s(PostPage, \"fp2w1gTNyBM5lUZNxbcOUXxWnvc=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = PostPage;\nexport default PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useNavigate","useLocation","initializeWebRTC","cleanupWebRTC","jsxDEV","_jsxDEV","Fragment","_Fragment","PostPage","_s","_location$state","showWebRTC","setShowWebRTC","userId","setUserId","selectedGroup","setSelectedGroup","postHistory","setPostHistory","isPlaying","setIsPlaying","signalingClientRef","peerConnectionRef","localView","mediaRecorder","setMediaRecorder","recordedChunks","setRecordedChunks","navigate","isRecordingStopped","setIsRecordingStopped","recordedVideo","setRecordedVideo","blurFace","setBlurFace","groups","setGroups","isLoading","setIsLoading","location","groupIdFromState","state","groupId","isSubmitting","setIsSubmitting","progress","setProgress","fakeProgress","setFakeProgress","channelARN","sessionUser","sessionStorage","getItem","console","log","user","JSON","parse","userid","fetch","then","response","ok","Error","status","json","data","arr","i","o","push","catch","error","groupsData","selectedGroupFromState","find","group","groupid","handleSubmit","event","preventDefault","formData","FormData","target","postTitle","get","trim","postText","videoKey","alert","uploadResult","uploadVideoWithProgress","progressEvent","loaded","total","key","postData","post_title","post_text","s3_content_key","group_id","method","headers","body","stringify","text","finally","current","uploadError","timer","setInterval","prevProgress","clearInterval","handleSortChange","sortOrder","value","prevHistory","sort","a","b","dateA","Date","post_date","dateB","tempRecordedChunks","handleTogglePlay","setTimeout","webrtc","signalingClient","peerConnection","stream","srcObject","recorder","MediaRecorder","ondataavailable","size","onstop","blob","Blob","type","start","stop","handleClear","document","getElementById","reset","URL","revokeObjectURL","handleGroupChange","formatDate","dateString","date","toISOString","split","id","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","ref","style","width","autoPlay","playsInline","controls","src","createObjectURL","onClick","placeholder","name","onChange","map","groupname","checked","e","max","post","index","_c","$RefreshReg$"],"sources":["C:/Users/17321/OneDrive/桌面/year-long-project-team-6/app/frontend/src/pages/Post.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport \"../component/CSS/post.css\";\r\nimport { initializeWebRTC, cleanupWebRTC } from './webrtc';\r\n\r\nfunction PostPage() {\r\n    const [showWebRTC, setShowWebRTC] = useState(false);\r\n    const [userId, setUserId] = useState(\"\");\r\n    const [selectedGroup, setSelectedGroup] = useState(\"\");\r\n    const [postHistory, setPostHistory] = useState([]);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const signalingClientRef = useRef(null);\r\n    const peerConnectionRef = useRef(null);\r\n    const localView = useRef(null);\r\n    const [mediaRecorder, setMediaRecorder] = useState(null);\r\n    const [recordedChunks, setRecordedChunks] = useState([]);\r\n    const navigate = useNavigate();\r\n    const [isRecordingStopped, setIsRecordingStopped] = useState(false);\r\n    const [recordedVideo, setRecordedVideo] = useState(null);\r\n    const [blurFace, setBlurFace] = useState(false);\r\n    const [groups, setGroups] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const location = useLocation();\r\n    const groupIdFromState = location.state?.groupId;\r\n    const [isSubmitting, setIsSubmitting] = useState(false);\r\n    const [progress, setProgress] = useState(0);\r\n    const [fakeProgress, setFakeProgress] = useState(0);\r\n\r\n\r\n    const channelARN = 'arn:aws:kinesisvideo:us-east-1:466618866658:channel/webrtc-499/1701571372732';\r\n    useEffect(() => {\r\n        const sessionUser = sessionStorage.getItem('user');\r\n        console.log(\"Sessopm User: \" + sessionUser);\r\n        if (!sessionUser) {\r\n            navigate('/login');\r\n        } else {\r\n            const user = JSON.parse(sessionUser);\r\n            setUserId(user.userid);\r\n            console.log(\"User Id: \" + user.userid);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            fetch(`http://localhost:5001/post-history/${userId}`)\r\n                .then(response => {\r\n                    if (!response.ok) {\r\n                        throw new Error(`HTTP error! status: ${response.status}`);\r\n                    }\r\n                    return response.json();\r\n                })\r\n                .then(data => {\r\n                    const arr = [];\r\n                    for (let i in data) {\r\n                        let o = {};\r\n                        o[i] = data[i];\r\n                        arr.push(o);\r\n                    }\r\n                    console.log(arr[0].data);\r\n                    setPostHistory(arr[0].data);\r\n                })\r\n                .catch(error => console.error('Error fetching post history:', error));\r\n\r\n            // Fetch groups\r\n            fetch(`http://localhost:5001/user-groups/${userId}`)\r\n                .then(response => {\r\n                    if (!response.ok) {\r\n                        throw new Error('Network response was not ok for fetching user groups');\r\n                    }\r\n                    return response.json();\r\n                })\r\n                .then(groupsData => {\r\n                    setGroups(groupsData);\r\n                    const selectedGroupFromState = groupsData.find(group => group.groupid == groupIdFromState);\r\n                    console.log(selectedGroupFromState);\r\n                    if (selectedGroupFromState) {\r\n                        setSelectedGroup(selectedGroupFromState.groupid);\r\n                    }\r\n                })\r\n                .catch(error => console.error('Error fetching user groups:', error));\r\n        }\r\n    }, [userId]);\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        setIsLoading(true);\r\n        setIsSubmitting(true);\r\n\r\n        const formData = new FormData(event.target);\r\n        const postTitle = formData.get('post_title').trim();\r\n        const postText = formData.get('post_text').trim();\r\n        const groupid = formData.get('groupid');\r\n        let videoKey = '';\r\n        if (!postTitle || !postText || !groupid || groupid === \"\") {\r\n            setIsLoading(false);\r\n            setIsSubmitting(false);\r\n            alert('Please ensure all fields are filled out correctly.');\r\n            return;\r\n        }\r\n\r\n        if (recordedVideo) {\r\n            try {\r\n\r\n                const uploadResult = await uploadVideoWithProgress(recordedVideo, postTitle, (progressEvent) => {\r\n                    const progress = (progressEvent.loaded / progressEvent.total) * 100;\r\n                    setProgress(progress);\r\n                });\r\n                videoKey = uploadResult.key;\r\n                console.log('Video uploaded successfully');\r\n                const postData = {\r\n                    post_title: postTitle,\r\n                    post_text: postText,\r\n                    s3_content_key: videoKey,\r\n                    userid: userId,\r\n                    blurFace: blurFace,\r\n                    group_id: selectedGroup\r\n                };\r\n                fetch('http://localhost:5001/add-post', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify(postData)\r\n                })\r\n                    .then(response => {\r\n                        if (!response.ok) {\r\n                            throw new Error('Network response was not ok');\r\n                        }\r\n                        return response.text();\r\n                    })\r\n                    .then(data => {\r\n                        console.log('Success:', data);\r\n                        navigate('/');\r\n                    })\r\n                    .catch((error) => {\r\n                        console.error('Error:', error);\r\n                    })\r\n                    .finally(() => {\r\n                        setIsLoading(false);\r\n                        setIsSubmitting(false);\r\n                    });\r\n\r\n                // Cleanup WebRTC after successful navigation\r\n                if (signalingClientRef.current || peerConnectionRef.current) {\r\n                    cleanupWebRTC(signalingClientRef.current, peerConnectionRef.current);\r\n                    signalingClientRef.current = null;\r\n                    peerConnectionRef.current = null;\r\n                }\r\n\r\n                setShowWebRTC(false);\r\n                setIsPlaying(false);\r\n\r\n            } catch (uploadError) {\r\n                console.error('Failed to upload video:', uploadError);\r\n                setIsLoading(false);\r\n                setIsSubmitting(false);\r\n                alert('Failed to upload video.');\r\n            }\r\n        } else {\r\n            setIsLoading(false);\r\n            setIsSubmitting(false);\r\n            alert('Please record your video.');\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            setFakeProgress((prevProgress) => {\r\n                if (prevProgress < 90) {\r\n                    return prevProgress + 1;\r\n                }\r\n                clearInterval(timer);\r\n                return prevProgress;\r\n            });\r\n        }, 100);\r\n        return () => clearInterval(timer);\r\n    }, [isSubmitting]);\r\n\r\n    // const uploadVideoWithProgress = (videoBlob, title, onProgress) => {\r\n    //     return new Promise((resolve, reject) => {\r\n    //         const xhr = new XMLHttpRequest();\r\n    //         const formData = new FormData();\r\n    //         formData.append('video', videoBlob, `${title}.webm`);\r\n\r\n    //         xhr.open('POST', 'http://localhost:5001/upload-video', true);\r\n\r\n    //         xhr.upload.onprogress = (event) => {\r\n    //             if (event.lengthComputable) {\r\n    //                 onProgress(event);\r\n    //             }\r\n    //         };\r\n\r\n    //         xhr.onload = () => {\r\n    //             if (xhr.status === 200) {\r\n    //                 resolve(JSON.parse(xhr.responseText));\r\n    //             } else {\r\n    //                 reject('Upload failed with status: ' + xhr.status);\r\n    //             }\r\n    //         };\r\n\r\n    //         xhr.onerror = () => reject(xhr.statusText);\r\n\r\n    //         xhr.send(formData);\r\n    //     });\r\n    // };\r\n\r\n    const handleSortChange = (event) => {\r\n        const sortOrder = event.target.value;\r\n        setPostHistory(prevHistory => {\r\n            return [...prevHistory].sort((a, b) => {\r\n                const dateA = new Date(a.post_date);\r\n                const dateB = new Date(b.post_date);\r\n                return sortOrder === 'Asc' ? dateA - dateB : dateB - dateA;\r\n            });\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log('recordedChunks updated:', recordedChunks);\r\n    }, [recordedChunks]);\r\n\r\n    let tempRecordedChunks = [];\r\n\r\n    const handleTogglePlay = async () => {\r\n        console.log('Click - isPlaying:', isPlaying, 'Refs:', localView.current);\r\n        if (!isPlaying) {\r\n            console.log(localView.current);\r\n            setTimeout(async () => {\r\n                if (localView.current) {\r\n                    try {\r\n                        const webrtc = await initializeWebRTC(channelARN, localView.current);\r\n                        signalingClientRef.current = webrtc.signalingClient;\r\n                        peerConnectionRef.current = webrtc.peerConnection;\r\n\r\n                        const stream = localView.current.srcObject;\r\n                        console.log('stream', stream);\r\n\r\n                        const recorder = new MediaRecorder(stream);\r\n                        setMediaRecorder(recorder);\r\n\r\n                        recorder.ondataavailable = (event) => {\r\n                            if (event.data.size > 0) {\r\n                                tempRecordedChunks.push(event.data);\r\n                            }\r\n                        };\r\n\r\n                        recorder.onstop = async () => {\r\n                            const blob = new Blob(tempRecordedChunks, { type: 'video/webm' });\r\n                            setRecordedVideo(blob);\r\n                            tempRecordedChunks = [];\r\n                        };\r\n\r\n\r\n                        setShowWebRTC(true);\r\n                        recorder.start();\r\n\r\n                    } catch (error) {\r\n                        console.error('Error initializing WebRTC: ', error);\r\n                    }\r\n                } else {\r\n                    console.log('Refs are not set:', localView.current);\r\n                }\r\n            }, 100);\r\n        } else {\r\n            if (mediaRecorder) {\r\n                mediaRecorder.stop();\r\n            }\r\n            cleanupWebRTC(signalingClientRef.current, peerConnectionRef.current);\r\n            signalingClientRef.current = null;\r\n            peerConnectionRef.current = null;\r\n            setShowWebRTC(false);\r\n\r\n        }\r\n        setIsPlaying(!isPlaying);\r\n    };\r\n    const handleClear = () => {\r\n        // Reset form fields\r\n        document.getElementById(\"postform\").reset();\r\n        // Stop recording if it's in progress\r\n        if (isPlaying && mediaRecorder && mediaRecorder.state !== \"inactive\") {\r\n            mediaRecorder.stop();\r\n        }\r\n\r\n        // Reset all relevant states to their initial values\r\n        setShowWebRTC(false);\r\n        setIsPlaying(false);\r\n        setIsRecordingStopped(false);\r\n        setRecordedVideo(null);\r\n        setBlurFace(false);\r\n\r\n        // Cleanup WebRTC if needed\r\n        if (signalingClientRef.current || peerConnectionRef.current) {\r\n            cleanupWebRTC(signalingClientRef.current, peerConnectionRef.current);\r\n            signalingClientRef.current = null;\r\n            peerConnectionRef.current = null;\r\n        }\r\n\r\n        // Clear recorded video URL to avoid memory leaks\r\n        if (recordedVideo) {\r\n            URL.revokeObjectURL(recordedVideo);\r\n        }\r\n    };\r\n    function handleGroupChange(event) {\r\n        setSelectedGroup(event.target.value);\r\n    }\r\n    const formatDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        return date.toISOString().split('T')[0];\r\n    };\r\n\r\n\r\n    return (\r\n        <div id='page'>\r\n            <div id=\"send\">\r\n                <h2>Send Your Post </h2>\r\n            </div>\r\n            <div className=\"flex-container\">\r\n                <div id=\"input\">\r\n                    <form onSubmit={handleSubmit} id=\"postform\">\r\n                        <div id=\"main\" className=\"main\">\r\n                            <div id=\"videoContainer\">\r\n                                {isPlaying && (\r\n                                    <>\r\n                                        <video ref={localView} style={{ width: '640px' }} autoPlay playsInline />\r\n\r\n                                    </>\r\n                                )}\r\n                                {recordedVideo ? (\r\n                                    <div>\r\n                                        <video style={{ width: '640px' }} controls>\r\n                                            <source src={URL.createObjectURL(recordedVideo)} type=\"video/webm\" />\r\n                                        </video>\r\n                                    </div>\r\n                                ) : (\r\n                                    <button id=\"record_button\" type='button' onClick={handleTogglePlay}>{isPlaying ? 'Stop' : 'Start Recording'}</button>\r\n                                )}\r\n\r\n\r\n                            </div>\r\n\r\n                            <div className=\"EnterText\" id=\"text_one\">\r\n                                <legend>Name your new video</legend>\r\n                                <input type=\"text\" id=\"VName\" placeholder=\"Video Name\" name=\"post_title\" />\r\n                            </div>\r\n                            <div className=\"EnterText\" id=\"text_two\">\r\n                                <legend>Description of Your Video</legend>\r\n                                <input type=\"text\" id=\"Description\" placeholder=\"Describe your video\" name=\"post_text\" />\r\n                            </div>\r\n                            <div className=\"group\">\r\n                                <legend>Choose a Group</legend>\r\n                                <select id=\"GName\" name=\"groupid\" value={selectedGroup} onChange={handleGroupChange}>\r\n                                    <option value=\"\"  >Choose a group</option>\r\n                                    {groups.map(group => (\r\n                                        <option key={group.groupname} value={group.groupid}>{group.groupname}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"blur\">\r\n                            <legend>\r\n                                BlurFace\r\n                            </legend>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                id=\"blurFace\"\r\n                                checked={blurFace}\r\n                                onChange={(e) => setBlurFace(e.target.checked)}\r\n                            />\r\n                        </div>\r\n                        {!isSubmitting ? (\r\n                            <>\r\n                                <button type=\"submit\" value=\"Submit\" name=\"submit\" id=\"submit\">Submit</button>\r\n                                <button type=\"button\" onClick={handleClear} id=\"submit\">Clear</button>\r\n                            </>\r\n                        ) : (\r\n                            <div>\r\n                                <label>\r\n                                    {progress < 100 ? \"Uploading...\" : \"Processing...\"}\r\n                                </label>\r\n                                <progress value={progress} max=\"100\"></progress>\r\n                            </div>\r\n                        )}\r\n                    </form>\r\n\r\n                </div>\r\n                <div id=\"HistroyBar\">\r\n                    <table id=\"histroyTable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <td>History</td>\r\n                                <td id=\"Sort\">\r\n                                    <select id=\"order\" name=\"order\" onChange={handleSortChange}>\r\n                                        <option value=\"Des\">Descending</option>\r\n                                        <option value=\"Asc\">Ascending</option>\r\n                                    </select>\r\n                                </td>\r\n                            </tr>\r\n\r\n                        </thead>\r\n                        <tbody>\r\n                            {postHistory.map((post, index) => (\r\n                                <tr key={index}>\r\n                                    <td id=\"img\">\r\n                                        {`${post.post_title}`}\r\n                                    </td>\r\n                                    <td id=\"date\">{formatDate(post.post_date)}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PostPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}