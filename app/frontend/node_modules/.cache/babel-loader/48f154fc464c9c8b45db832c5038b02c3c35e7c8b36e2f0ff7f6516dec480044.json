{"ast":null,"code":"var _jsxFileName = \"/Users/xuximin/Desktop/499/year-long-project-team-6/app/frontend/src/pages/groupPost.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport \"../component/CSS/sidebar_style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction GroupPost() {\n  _s();\n  const [userId, setUserId] = useState('');\n  const {\n    groupId,\n    sendername\n  } = useParams();\n  const [senderId, setSenderId] = useState('');\n  const [posts, setPosts] = useState([]);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const sessionUser = sessionStorage.getItem('user');\n    if (!sessionUser) {\n      navigate('/login');\n    } else {\n      const user = JSON.parse(sessionUser);\n      setUserId(user.userid);\n      fetch(`http://localhost:5001/get-sender-id/${sendername}`).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      }).then(data => {\n        if (data && data.length > 0) {\n          const sender = data[0].userid;\n          setSenderId(sender);\n          console.log(\"SenderId after setting state: \" + sender);\n        } else {\n          console.log(\"No data received or data is empty\");\n        }\n      }).catch(error => {\n        console.error('Error fetching posts:', error);\n      });\n    }\n  }, []);\n  useEffect(() => {\n    const fetchPosts = async () => {\n      try {\n        console.log(\"SenderId: \" + senderId);\n        console.log(\"GroupId: \" + groupId);\n        const response = await fetch(`http://localhost:5001/posts/${senderId}/${groupId}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setPosts(data);\n      } catch (error) {\n        console.error('Error fetching posts:', error);\n      }\n    };\n    fetchPosts();\n  }, [senderId, groupId]);\n  const handleView = async videoId => {\n    navigate(`/Video/${videoId}`);\n  };\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    return date.toISOString().split('T')[0];\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"VideoList\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          id: \"videoTable\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"all\",\n                children: \"All Videos\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: posts.map(post => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"title\",\n                \"data-description\": post.post_text,\n                children: post.post_title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: formatDate(post.post_date)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"view\",\n                  onClick: () => {\n                    handleView(post.post_id);\n                  },\n                  children: \"View\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 87,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 37\n              }, this)]\n            }, post.post_id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n}\n_s(GroupPost, \"319oaQcKI5CiSKgDzKw+o5vsdoE=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = GroupPost;\nexport default GroupPost;\nvar _c;\n$RefreshReg$(_c, \"GroupPost\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","GroupPost","_s","userId","setUserId","groupId","sendername","senderId","setSenderId","posts","setPosts","navigate","sessionUser","sessionStorage","getItem","user","JSON","parse","userid","fetch","then","response","ok","Error","status","json","data","length","sender","console","log","catch","error","fetchPosts","handleView","videoId","formatDate","dateString","date","Date","toISOString","split","children","id","className","fileName","_jsxFileName","lineNumber","columnNumber","map","post","post_text","post_title","post_date","onClick","post_id","_c","$RefreshReg$"],"sources":["/Users/xuximin/Desktop/499/year-long-project-team-6/app/frontend/src/pages/groupPost.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useNavigate, useParams } from \"react-router-dom\";\n\nimport \"../component/CSS/sidebar_style.css\";\n\nfunction GroupPost() {\n    const [userId, setUserId] = useState('');\n    const { groupId, sendername } = useParams();\n    const [senderId, setSenderId] = useState('');\n    const [posts, setPosts] = useState([]);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        const sessionUser = sessionStorage.getItem('user');\n        if (!sessionUser) {\n            navigate('/login');\n        } else {\n            const user = JSON.parse(sessionUser);\n            setUserId(user.userid);\n            fetch(`http://localhost:5001/get-sender-id/${sendername}`)\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(`HTTP error! status: ${response.status}`);\n                    }\n                    return response.json();\n                })\n                .then(data => {\n                    if (data && data.length > 0) {\n                        const sender = data[0].userid;\n                        setSenderId(sender);\n                        console.log(\"SenderId after setting state: \" + sender);\n\n                    } else {\n                        console.log(\"No data received or data is empty\");\n                    }\n                })\n                .catch(error => {\n                    console.error('Error fetching posts:', error);\n                });\n        }\n    }, []);\n\n    useEffect(() => {\n        const fetchPosts = async () => {\n            try {\n                console.log(\"SenderId: \" + senderId);\n                console.log(\"GroupId: \" + groupId);\n                const response = await fetch(`http://localhost:5001/posts/${senderId}/${groupId}`);\n                if (!response.ok) {\n                    throw new Error(`HTTP error! status: ${response.status}`);\n                }\n                const data = await response.json();\n                setPosts(data);\n            } catch (error) {\n                console.error('Error fetching posts:', error);\n            }\n        };\n        fetchPosts();\n    }, [senderId, groupId]);\n\n    const handleView = async (videoId) => {\n        navigate(`/Video/${videoId}`)\n    };\n\n    const formatDate = (dateString) => {\n        const date = new Date(dateString);\n        return date.toISOString().split('T')[0];\n    };\n\n    return (\n        <>\n            <div id=\"content\">\n                <div id=\"VideoList\">\n                    <table id=\"videoTable\">\n                        <thead>\n                            <tr>\n                                <td className=\"all\">All Videos</td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {posts.map((post) => (\n                                <tr key={post.post_id}>\n                                    <td className=\"title\" data-description={post.post_text}>\n                                        {post.post_title}\n                                    </td>\n                                    <td>{formatDate(post.post_date)}</td>\n                                    <td><button className='view' onClick={() => {\n                                        handleView(post.post_id)\n                                    }}>View</button></td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </>\n    );\n\n\n\n\n}\n\nexport default GroupPost;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}