{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SignalingClient = void 0;\nvar tslib_1 = require(\"tslib\");\nvar events_1 = require(\"events\");\nvar Role_1 = require(\"./Role\");\nvar SigV4RequestSigner_1 = require(\"./SigV4RequestSigner\");\nvar DateProvider_1 = tslib_1.__importDefault(require(\"./internal/DateProvider\"));\nvar utils_1 = require(\"./internal/utils\");\nvar MessageType;\n(function (MessageType) {\n  MessageType[\"SDP_ANSWER\"] = \"SDP_ANSWER\";\n  MessageType[\"SDP_OFFER\"] = \"SDP_OFFER\";\n  MessageType[\"ICE_CANDIDATE\"] = \"ICE_CANDIDATE\";\n  MessageType[\"STATUS_RESPONSE\"] = \"STATUS_RESPONSE\";\n})(MessageType || (MessageType = {}));\nvar ReadyState;\n(function (ReadyState) {\n  ReadyState[ReadyState[\"CONNECTING\"] = 0] = \"CONNECTING\";\n  ReadyState[ReadyState[\"OPEN\"] = 1] = \"OPEN\";\n  ReadyState[ReadyState[\"CLOSING\"] = 2] = \"CLOSING\";\n  ReadyState[ReadyState[\"CLOSED\"] = 3] = \"CLOSED\";\n})(ReadyState || (ReadyState = {}));\n/**\n * Client for sending and receiving messages from a KVS Signaling Channel. The client can operate as either the 'MASTER' or a 'VIEWER'.\n *\n * Typically, the 'MASTER' listens for ICE candidates and SDP offers and responds with and SDP answer and its own ICE candidates.\n *\n * Typically, the 'VIEWER' sends an SDP offer and its ICE candidates and then listens for ICE candidates and SDP answers from the 'MASTER'.\n */\nvar SignalingClient = /** @class */function (_super) {\n  tslib_1.__extends(SignalingClient, _super);\n  /**\n   * Creates a new SignalingClient. The connection with the signaling service must be opened with the 'open' method.\n   * @param {SignalingClientConfig} config - Configuration options and parameters.\n   * is not provided, it will be loaded from the global scope.\n   */\n  function SignalingClient(config) {\n    var _this = _super.call(this) || this;\n    _this.websocket = null;\n    _this.readyState = ReadyState.CLOSED;\n    _this.pendingIceCandidatesByClientId = {};\n    _this.hasReceivedRemoteSDPByClientId = {};\n    // Validate config\n    (0, utils_1.validateValueNonNil)(config, 'SignalingClientConfig');\n    (0, utils_1.validateValueNonNil)(config.role, 'role');\n    if (config.role === Role_1.Role.VIEWER) {\n      (0, utils_1.validateValueNonNil)(config.clientId, 'clientId');\n    } else {\n      (0, utils_1.validateValueNil)(config.clientId, 'clientId');\n    }\n    (0, utils_1.validateValueNonNil)(config.channelARN, 'channelARN');\n    (0, utils_1.validateValueNonNil)(config.region, 'region');\n    (0, utils_1.validateValueNonNil)(config.channelEndpoint, 'channelEndpoint');\n    _this.config = tslib_1.__assign({}, config); // Copy config to new object for immutability.\n    if (config.requestSigner) {\n      _this.requestSigner = config.requestSigner;\n    } else {\n      (0, utils_1.validateValueNonNil)(config.credentials, 'credentials');\n      _this.requestSigner = new SigV4RequestSigner_1.SigV4RequestSigner(config.region, config.credentials);\n    }\n    _this.dateProvider = new DateProvider_1.default(config.systemClockOffset || 0);\n    // Bind event handlers\n    _this.onOpen = _this.onOpen.bind(_this);\n    _this.onMessage = _this.onMessage.bind(_this);\n    _this.onError = _this.onError.bind(_this);\n    _this.onClose = _this.onClose.bind(_this);\n    return _this;\n  }\n  /**\n   * Opens the connection with the signaling service. Listen to the 'open' event to be notified when the connection has been opened.\n   */\n  SignalingClient.prototype.open = function () {\n    var _this = this;\n    if (this.readyState !== ReadyState.CLOSED) {\n      throw new Error('Client is already open, opening, or closing');\n    }\n    this.readyState = ReadyState.CONNECTING;\n    // The process of opening the connection is asynchronous via promises, but the interaction model is to handle asynchronous actions via events.\n    // Therefore, we just kick off the asynchronous process and then return and let it fire events.\n    this.asyncOpen().then().catch(function (err) {\n      return _this.onError(err);\n    });\n  };\n  /**\n   * Asynchronous implementation of `open`.\n   */\n  SignalingClient.prototype.asyncOpen = function () {\n    return tslib_1.__awaiter(this, void 0, void 0, function () {\n      var queryParams, signedURL;\n      return tslib_1.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            queryParams = {\n              'X-Amz-ChannelARN': this.config.channelARN\n            };\n            if (this.config.role === Role_1.Role.VIEWER) {\n              queryParams['X-Amz-ClientId'] = this.config.clientId;\n            }\n            return [4 /*yield*/, this.requestSigner.getSignedURL(this.config.channelEndpoint, queryParams, this.dateProvider.getDate())];\n          case 1:\n            signedURL = _a.sent();\n            // If something caused the state to change from CONNECTING, then don't create the WebSocket instance.\n            if (this.readyState !== ReadyState.CONNECTING) {\n              return [2 /*return*/];\n            }\n            /* istanbul ignore next */\n            this.websocket = new (global.WebSocket || require('ws'))(signedURL);\n            this.websocket.addEventListener('open', this.onOpen);\n            this.websocket.addEventListener('message', this.onMessage);\n            this.websocket.addEventListener('error', this.onError);\n            this.websocket.addEventListener('close', this.onClose);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Closes the connection to the KVS Signaling Service. If already closed or closing, no action is taken. Listen to the 'close' event to be notified when the\n   * connection has been closed.\n   */\n  SignalingClient.prototype.close = function () {\n    if (this.websocket !== null) {\n      this.readyState = ReadyState.CLOSING;\n      this.websocket.close();\n    } else if (this.readyState !== ReadyState.CLOSED) {\n      this.onClose();\n    }\n  };\n  /**\n   * Sends the given SDP offer to the signaling service.\n   *\n   * Typically, only the 'VIEWER' role should send an SDP offer.\n   * @param {RTCSessionDescription} sdpOffer - SDP offer to send.\n   * @param {string} [recipientClientId] - ID of the client to send the message to. Required for 'MASTER' role. Should not be present for 'VIEWER' role.\n   * @param {string} [correlationId] - Unique ID for this message. If this is present and there is an error,\n   * Signaling will send a StatusResponse message describing the error. If this is not present, no error will be returned.\n   */\n  SignalingClient.prototype.sendSdpOffer = function (sdpOffer, recipientClientId, correlationId) {\n    this.sendMessage(MessageType.SDP_OFFER, sdpOffer, recipientClientId, correlationId);\n  };\n  /**\n   * Sends the given SDP answer to the signaling service.\n   *\n   * Typically, only the 'MASTER' role should send an SDP answer.\n   * @param {RTCSessionDescription} sdpAnswer - SDP answer to send.\n   * @param {string} [recipientClientId] - ID of the client to send the message to. Required for 'MASTER' role. Should not be present for 'VIEWER' role.\n   * @param {string} [correlationId] - Unique ID for this message. If this is present and there is an error,\n   * Signaling will send a StatusResponse message describing the error. If this is not present, no error will be returned.\n   */\n  SignalingClient.prototype.sendSdpAnswer = function (sdpAnswer, recipientClientId, correlationId) {\n    this.sendMessage(MessageType.SDP_ANSWER, sdpAnswer, recipientClientId, correlationId);\n  };\n  /**\n   * Sends the given ICE candidate to the signaling service.\n   *\n   * Typically, both the 'VIEWER' role and 'MASTER' role should send ICE candidates.\n   * @param {RTCIceCandidate} iceCandidate - ICE candidate to send.\n   * @param {string} [recipientClientId] - ID of the client to send the message to. Required for 'MASTER' role. Should not be present for 'VIEWER' role.\n   * @param {string} [correlationId] - Unique ID for this message. If this is present and there is an error,\n   * Signaling will send a StatusResponse message describing the error. If this is not present, no error will be returned.\n   */\n  SignalingClient.prototype.sendIceCandidate = function (iceCandidate, recipientClientId, correlationId) {\n    this.sendMessage(MessageType.ICE_CANDIDATE, iceCandidate, recipientClientId, correlationId);\n  };\n  /**\n   * Validates the WebSocket connection is open and that the recipient client id is present if sending as the 'MASTER'. Encodes the given message payload\n   * and sends the message to the signaling service.\n   */\n  SignalingClient.prototype.sendMessage = function (action, messagePayload, recipientClientId, correlationId) {\n    if (this.readyState !== ReadyState.OPEN) {\n      throw new Error('Could not send message because the connection to the signaling service is not open.');\n    }\n    this.validateRecipientClientId(recipientClientId);\n    this.validateCorrelationId(correlationId);\n    this.websocket.send(JSON.stringify({\n      action: action,\n      messagePayload: SignalingClient.serializeJSONObjectAsBase64String(messagePayload),\n      recipientClientId: recipientClientId || undefined,\n      correlationId: correlationId || undefined\n    }));\n  };\n  /**\n   * Removes all event listeners from the WebSocket and removes the reference to the WebSocket object.\n   */\n  SignalingClient.prototype.cleanupWebSocket = function () {\n    if (this.websocket === null) {\n      return;\n    }\n    this.websocket.removeEventListener('open', this.onOpen);\n    this.websocket.removeEventListener('message', this.onMessage);\n    this.websocket.removeEventListener('error', this.onError);\n    this.websocket.removeEventListener('close', this.onClose);\n    this.websocket = null;\n  };\n  /**\n   * WebSocket 'open' event handler. Forwards the event on to listeners.\n   */\n  SignalingClient.prototype.onOpen = function () {\n    this.readyState = ReadyState.OPEN;\n    this.emit('open');\n  };\n  /**\n   * WebSocket 'message' event handler. Attempts to parse the message and handle it according to the message type.\n   */\n  SignalingClient.prototype.onMessage = function (event) {\n    var parsedEventData;\n    var parsedMessagePayload;\n    try {\n      parsedEventData = JSON.parse(event.data);\n    } catch (e) {\n      // For forwards compatibility we ignore messages that are not able to be parsed.\n      // TODO: Consider how to make it easier for users to be aware of dropped messages.\n      return;\n    }\n    try {\n      parsedMessagePayload = SignalingClient.parseJSONObjectFromBase64String(parsedEventData.messagePayload);\n    } catch (e) {\n      // TODO: Consider how to make it easier for users to be aware of dropped messages.\n    }\n    var messageType = parsedEventData.messageType,\n      senderClientId = parsedEventData.senderClientId,\n      statusResponse = parsedEventData.statusResponse;\n    if (!parsedMessagePayload && !statusResponse) {\n      // TODO: Consider how to make it easier for users to be aware of dropped messages.\n      return;\n    }\n    switch (messageType) {\n      case MessageType.SDP_OFFER:\n        this.emit('sdpOffer', parsedMessagePayload, senderClientId);\n        this.emitPendingIceCandidates(senderClientId);\n        return;\n      case MessageType.SDP_ANSWER:\n        this.emit('sdpAnswer', parsedMessagePayload, senderClientId);\n        this.emitPendingIceCandidates(senderClientId);\n        return;\n      case MessageType.ICE_CANDIDATE:\n        this.emitOrQueueIceCandidate(parsedMessagePayload, senderClientId);\n        return;\n      case MessageType.STATUS_RESPONSE:\n        this.emit('statusResponse', statusResponse);\n        return;\n    }\n  };\n  /**\n   * Takes the given base64 encoded string and decodes it into a JSON object.\n   */\n  SignalingClient.parseJSONObjectFromBase64String = function (base64EncodedString) {\n    try {\n      return JSON.parse(atob(base64EncodedString));\n    } catch (e) {\n      return JSON.parse(Buffer.from(base64EncodedString, 'base64').toString());\n    }\n  };\n  /**\n   * Takes the given JSON object and encodes it into a base64 string.\n   */\n  SignalingClient.serializeJSONObjectAsBase64String = function (object) {\n    try {\n      return btoa(JSON.stringify(object));\n    } catch (e) {\n      return Buffer.from(JSON.stringify(object)).toString('base64');\n    }\n  };\n  /**\n   * If an SDP offer or answer has already been received from the given client, then the given ICE candidate is emitted. Otherwise, it is queued up for when\n   * an SDP offer or answer is received.\n   */\n  SignalingClient.prototype.emitOrQueueIceCandidate = function (iceCandidate, clientId) {\n    var clientIdKey = clientId || SignalingClient.DEFAULT_CLIENT_ID;\n    if (this.hasReceivedRemoteSDPByClientId[clientIdKey]) {\n      this.emit('iceCandidate', iceCandidate, clientId);\n    } else {\n      if (!this.pendingIceCandidatesByClientId[clientIdKey]) {\n        this.pendingIceCandidatesByClientId[clientIdKey] = [];\n      }\n      this.pendingIceCandidatesByClientId[clientIdKey].push(iceCandidate);\n    }\n  };\n  /**\n   * Emits any pending ICE candidates for the given client and records that an SDP offer or answer has been received from the client.\n   */\n  SignalingClient.prototype.emitPendingIceCandidates = function (clientId) {\n    var _this = this;\n    var clientIdKey = clientId || SignalingClient.DEFAULT_CLIENT_ID;\n    this.hasReceivedRemoteSDPByClientId[clientIdKey] = true;\n    var pendingIceCandidates = this.pendingIceCandidatesByClientId[clientIdKey];\n    if (!pendingIceCandidates) {\n      return;\n    }\n    delete this.pendingIceCandidatesByClientId[clientIdKey];\n    pendingIceCandidates.forEach(function (iceCandidate) {\n      _this.emit('iceCandidate', iceCandidate, clientId);\n    });\n  };\n  /**\n   * Throws an error if the recipient client id is null and the current role is 'MASTER' as all messages sent as 'MASTER' should have a recipient client id.\n   */\n  SignalingClient.prototype.validateRecipientClientId = function (recipientClientId) {\n    if (this.config.role === Role_1.Role.VIEWER && recipientClientId) {\n      throw new Error('Unexpected recipient client id. As the VIEWER, messages must not be sent with a recipient client id.');\n    }\n  };\n  /**\n   * Throws an error if the correlationId does not fit the constraints mentioned in {@link https://docs.aws.amazon.com/kinesisvideostreams-webrtc-dg/latest/devguide/kvswebrtc-websocket-apis4.html the documentation}.\n   */\n  SignalingClient.prototype.validateCorrelationId = function (correlationId) {\n    if (correlationId && !/^[a-zA-Z0-9_.-]{1,256}$/.test(correlationId)) {\n      throw new Error('Correlation id does not fit the constraint!');\n    }\n  };\n  /**\n   * 'error' event handler. Forwards the error onto listeners.\n   */\n  SignalingClient.prototype.onError = function (error) {\n    this.emit('error', error);\n  };\n  /**\n   * 'close' event handler. Forwards the error onto listeners and cleans up the connection.\n   */\n  SignalingClient.prototype.onClose = function () {\n    this.readyState = ReadyState.CLOSED;\n    this.cleanupWebSocket();\n    this.emit('close');\n  };\n  SignalingClient.DEFAULT_CLIENT_ID = 'MASTER';\n  return SignalingClient;\n}(events_1.EventEmitter);\nexports.SignalingClient = SignalingClient;","map":{"version":3,"names":["events_1","require","Role_1","SigV4RequestSigner_1","DateProvider_1","tslib_1","__importDefault","utils_1","MessageType","ReadyState","SignalingClient","_super","__extends","config","_this","call","websocket","readyState","CLOSED","pendingIceCandidatesByClientId","hasReceivedRemoteSDPByClientId","validateValueNonNil","role","Role","VIEWER","clientId","validateValueNil","channelARN","region","channelEndpoint","__assign","requestSigner","credentials","SigV4RequestSigner","dateProvider","default","systemClockOffset","onOpen","bind","onMessage","onError","onClose","prototype","open","Error","CONNECTING","asyncOpen","then","catch","err","queryParams","getSignedURL","getDate","signedURL","_a","sent","global","WebSocket","addEventListener","close","CLOSING","sendSdpOffer","sdpOffer","recipientClientId","correlationId","sendMessage","SDP_OFFER","sendSdpAnswer","sdpAnswer","SDP_ANSWER","sendIceCandidate","iceCandidate","ICE_CANDIDATE","action","messagePayload","OPEN","validateRecipientClientId","validateCorrelationId","send","JSON","stringify","serializeJSONObjectAsBase64String","undefined","cleanupWebSocket","removeEventListener","emit","event","parsedEventData","parsedMessagePayload","parse","data","e","parseJSONObjectFromBase64String","messageType","senderClientId","statusResponse","emitPendingIceCandidates","emitOrQueueIceCandidate","STATUS_RESPONSE","base64EncodedString","atob","Buffer","from","toString","object","btoa","clientIdKey","DEFAULT_CLIENT_ID","push","pendingIceCandidates","forEach","test","error","EventEmitter","exports"],"sources":["../src/SignalingClient.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}