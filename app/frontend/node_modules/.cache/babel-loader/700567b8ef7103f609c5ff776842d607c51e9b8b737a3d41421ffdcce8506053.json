{"ast":null,"code":"var _jsxFileName = \"D:\\\\gitbash\\\\year-long-project-team-6\\\\app\\\\frontend\\\\src\\\\pages\\\\UserProfile.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport profilePicture from '../component/image/AvatarForProfile.png';\nimport \"../component/CSS/profile.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserProfile = () => {\n  _s();\n  const [user, setUser] = useState({\n    name: '',\n    email: '',\n    profilePicture: profilePicture,\n    gender: '',\n    Bdate: '',\n    role: ''\n  });\n  const [isEditMode, setIsEditMode] = useState(false);\n  // Just a temporary value for the both fields since we do not have them in the database. \n  const [tempGender, setTempGender] = useState(user.gender);\n  const [tempBdate, setTempBdate] = useState(user.Bdate);\n  useEffect(() => {\n    const storedUser = JSON.parse(sessionStorage.getItem('user'));\n    if (storedUser) {\n      setUser({\n        ...storedUser,\n        profilePicture: storedUser.profilePicture || profilePicture\n      });\n    }\n  }, []);\n  const handleEditClick = () => {\n    setIsEditMode(true);\n  };\n  const handleSaveClick = () => {\n    setUser({\n      ...user,\n      gender: tempGender,\n      Bdate: tempBdate\n    });\n    setIsEditMode(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-profile\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"avatar-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: user.profilePicture,\n        alt: `${user.username}'s profile`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), isEditMode ? /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"save-profile\",\n        onClick: handleSaveClick,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"edit-profile\",\n        onClick: handleEditClick,\n        children: \"Edit Profile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Username: \", user.username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Email: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 16\n      }, this), user.email]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Gender: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 16\n      }, this), isEditMode ?\n      /*#__PURE__*/\n      // since we are in edit mode, we need to change the value. However, input value will be back to N/A after a refresh. \n      _jsxDEV(\"input\", {\n        type: \"text\",\n        value: tempGender,\n        onChange: input => setTempGender(input.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this) : user.gender || \"Null\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Birth Date: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 16\n      }, this), isEditMode ? /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        value: tempBdate,\n        onChange: input => setTempBdate(input.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this) : user.Bdate || \"Null\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Role: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 16\n      }, this), user.role]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n_s(UserProfile, \"iMf8kHfdXHRICOPfY12n7dLEN1E=\");\n_c = UserProfile;\nexport default UserProfile;\nvar _c;\n$RefreshReg$(_c, \"UserProfile\");","map":{"version":3,"names":["React","useState","useEffect","profilePicture","jsxDEV","_jsxDEV","UserProfile","_s","user","setUser","name","email","gender","Bdate","role","isEditMode","setIsEditMode","tempGender","setTempGender","tempBdate","setTempBdate","storedUser","JSON","parse","sessionStorage","getItem","handleEditClick","handleSaveClick","className","children","src","alt","username","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","input","target","_c","$RefreshReg$"],"sources":["D:/gitbash/year-long-project-team-6/app/frontend/src/pages/UserProfile.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport profilePicture from '../component/image/AvatarForProfile.png';\r\nimport \"../component/CSS/profile.css\"\r\nconst UserProfile = () => {\r\n    const [user, setUser] = useState({\r\n        name: '',\r\n        email: '',\r\n        profilePicture: profilePicture,\r\n        gender: '',\r\n        Bdate: '',\r\n        role: ''\r\n    });\r\n    const [isEditMode, setIsEditMode] = useState(false);\r\n    // Just a temporary value for the both fields since we do not have them in the database. \r\n    const [tempGender, setTempGender] = useState(user.gender);\r\n    const [tempBdate, setTempBdate] = useState(user.Bdate);\r\n\r\n    useEffect(() => {\r\n        const storedUser = JSON.parse(sessionStorage.getItem('user'));\r\n        if (storedUser) {\r\n            setUser({\r\n                ...storedUser,\r\n                profilePicture: storedUser.profilePicture || profilePicture\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const handleEditClick = () => {\r\n        setIsEditMode(true);\r\n    };\r\n\r\n    const handleSaveClick = () => {\r\n        setUser({ ...user, gender: tempGender, Bdate: tempBdate });\r\n        setIsEditMode(false);\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"user-profile\">\r\n            <div className=\"avatar-container\">\r\n                <img src={user.profilePicture} alt={`${user.username}'s profile`} />\r\n                {/* first is false, so we show the edit profile. when handleEditclick function perform, isEditmode will be true. Then we came to the edit page*/}\r\n                {isEditMode ? (\r\n                    <button className=\"save-profile\" onClick={handleSaveClick}>Save</button>\r\n                ) : (\r\n                    <button className=\"edit-profile\" onClick={handleEditClick}>Edit Profile</button>\r\n                )}\r\n            </div>\r\n            <h1>Username: {user.username}</h1>\r\n            <p><strong>Email: </strong>{user.email}</p>\r\n            <p><strong>Gender: </strong>\r\n                {isEditMode ? (\r\n                    // since we are in edit mode, we need to change the value. However, input value will be back to N/A after a refresh. \r\n                    <input type=\"text\" value={tempGender} onChange={(input) => setTempGender(input.target.value)} />\r\n                ) : (\r\n                    user.gender || \"Null\"\r\n                )}\r\n            </p>\r\n            <p><strong>Birth Date: </strong>\r\n                {isEditMode ? (\r\n                    <input type=\"date\" value={tempBdate} onChange={(input) => setTempBdate(input.target.value)} />\r\n                ) : (\r\n                    user.Bdate || \"Null\"\r\n                )}\r\n            </p>\r\n            <p><strong>Role: </strong>{user.role}</p>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\n\r\nexport default UserProfile;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}