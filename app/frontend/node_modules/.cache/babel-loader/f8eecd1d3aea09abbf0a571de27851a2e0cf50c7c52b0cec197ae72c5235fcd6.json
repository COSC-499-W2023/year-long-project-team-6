{"ast":null,"code":"const SignalingClient = require('amazon-kinesis-video-streams-webrtc').SignalingClient;\nconst KVSWebRTC = require('amazon-kinesis-video-streams-webrtc');\n\n// Function to request signaling channel endpoint and ICE server configuration from the server\nasync function getSignalingChannelConfig(channelARN) {\n  const response = await fetch(`http://localhost:5001/getSignalingChannelConfig?channelARN=${encodeURIComponent(channelARN)}`);\n  if (!response.ok) {\n    throw new Error(`Failed to get signaling channel config: ${response.statusText}`);\n  }\n  const config = await response.json();\n  console.log(\"Received config from server:\", config);\n  return config;\n}\nasync function fetchCredentials() {\n  try {\n    const response = await fetch('http://localhost:5001/get-temp-credentials'); // The endpoint on your server\n    if (!response.ok) {\n      throw new Error('Failed to fetch credentials: ' + response.statusText);\n    }\n    const data = await response.json();\n    return {\n      accessKeyId: data.accessKeyId,\n      secretAccessKey: data.secretAccessKey,\n      sessionToken: data.sessionToken\n    };\n  } catch (error) {\n    console.error('Error fetching credentials from server:', error);\n    throw error; // Rethrow the error to handle it in the calling function\n  }\n}\n\nasync function sendStreamToServer(localStream) {\n  const ws = new WebSocket('ws:////localhost:5001/ingest-stream');\n  let mediaRecorder;\n  ws.onopen = () => {\n    console.log('WebSocket connection established.');\n\n    // Set up the media recorder\n    mediaRecorder = new MediaRecorder(localStream, {\n      mimeType: 'video/webm; codecs=vp8'\n    });\n\n    // When data is available, send it over the WebSocket\n    mediaRecorder.ondataavailable = event => {\n      if (event.data && event.data.size > 0) {\n        ws.send(event.data);\n      }\n    };\n\n    // Start recording\n    mediaRecorder.start(1000); // For example, each chunk is 1 second of video\n  };\n\n  ws.onerror = error => {\n    console.error('WebSocket error:', error);\n  };\n  ws.onmessage = message => {\n    // Handle incoming messages or acknowledgments from the server\n  };\n  ws.onclose = () => {\n    console.log('WebSocket connection closed.');\n    if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n      mediaRecorder.stop();\n    }\n  };\n}\n\n// Function to create and configure the peer connection\nfunction createPeerConnection(iceServers) {\n  const peerConnectionConfig = {\n    iceServers\n  };\n  const peerConnection = new RTCPeerConnection(peerConnectionConfig);\n  return peerConnection;\n}\n\n// Main function to initialize WebRTC connection\nexport async function initializeWebRTC(channelARN, localView) {\n  try {\n    const config = await getSignalingChannelConfig(channelARN);\n    const {\n      endpointsByProtocol,\n      iceServers\n    } = config;\n    const credentials = await fetchCredentials();\n    const peerConnection = createPeerConnection(iceServers);\n    let localStream = null;\n\n    // Get a stream from the webcam and add it to the peer connection\n    try {\n      localStream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          width: {\n            ideal: 1280\n          },\n          height: {\n            ideal: 720\n          }\n        },\n        audio: true\n      });\n      localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));\n      localView.srcObject = localStream;\n    } catch (e) {\n      console.error(\"Error getting local stream:\", e);\n      return;\n    }\n    const signalingClient = new SignalingClient({\n      channelARN,\n      channelEndpoint: endpointsByProtocol.WSS,\n      clientId: '23',\n      role: KVSWebRTC.Role.VIEWER,\n      region: 'us-east-1',\n      credentials: credentials\n    });\n    signalingClient.open();\n\n    // Set up signaling client event listeners and peer connection logic\n    signalingClient.on('open', async () => {\n      // Create an SDP offer and send it to the master\n      const offer = await peerConnection.createOffer({\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: true\n      });\n      await peerConnection.setLocalDescription(offer);\n      signalingClient.sendSdpOffer(peerConnection.localDescription);\n      await sendStreamToServer(localStream);\n    });\n    signalingClient.on('sdpAnswer', async answer => {\n      await peerConnection.setRemoteDescription(answer);\n    });\n    signalingClient.on('iceCandidate', candidate => {\n      peerConnection.addIceCandidate(candidate);\n    });\n    return {\n      signalingClient,\n      peerConnection,\n      localStream\n    };\n  } catch (error) {\n    console.error('Error initializing WebRTC: ', error);\n  }\n}\nexport function cleanupWebRTC(signalingClient, peerConnection) {\n  console.log(\"webRtc is cleaned\");\n  if (signalingClient) {\n    signalingClient.close();\n  }\n  if (peerConnection) {\n    peerConnection.getSenders().forEach(sender => {\n      if (sender.track) {\n        sender.track.stop();\n      }\n    });\n    peerConnection.close();\n  }\n}","map":{"version":3,"names":["SignalingClient","require","KVSWebRTC","getSignalingChannelConfig","channelARN","response","fetch","encodeURIComponent","ok","Error","statusText","config","json","console","log","fetchCredentials","data","accessKeyId","secretAccessKey","sessionToken","error","sendStreamToServer","localStream","ws","WebSocket","mediaRecorder","onopen","MediaRecorder","mimeType","ondataavailable","event","size","send","start","onerror","onmessage","message","onclose","state","stop","createPeerConnection","iceServers","peerConnectionConfig","peerConnection","RTCPeerConnection","initializeWebRTC","localView","endpointsByProtocol","credentials","navigator","mediaDevices","getUserMedia","video","width","ideal","height","audio","getTracks","forEach","track","addTrack","srcObject","e","signalingClient","channelEndpoint","WSS","clientId","role","Role","VIEWER","region","open","on","offer","createOffer","offerToReceiveAudio","offerToReceiveVideo","setLocalDescription","sendSdpOffer","localDescription","answer","setRemoteDescription","candidate","addIceCandidate","cleanupWebRTC","close","getSenders","sender"],"sources":["/Users/xuximin/Desktop/499/year-long-project-team-6/app/frontend/src/pages/webrtc.js"],"sourcesContent":["const SignalingClient = require('amazon-kinesis-video-streams-webrtc').SignalingClient;\nconst KVSWebRTC = require('amazon-kinesis-video-streams-webrtc');\n\n// Function to request signaling channel endpoint and ICE server configuration from the server\nasync function getSignalingChannelConfig(channelARN) {\n    const response = await fetch(`http://localhost:5001/getSignalingChannelConfig?channelARN=${encodeURIComponent(channelARN)}`);\n    if (!response.ok) {\n        throw new Error(`Failed to get signaling channel config: ${response.statusText}`);\n    }\n    const config = await response.json();\nconsole.log(\"Received config from server:\", config);\nreturn config;\n\n}\nasync function fetchCredentials() {\n    try {\n        const response = await fetch('http://localhost:5001/get-temp-credentials');  // The endpoint on your server\n        if (!response.ok) {\n            throw new Error('Failed to fetch credentials: ' + response.statusText);\n        }\n        const data = await response.json();\n        return {\n            accessKeyId: data.accessKeyId,\n            secretAccessKey: data.secretAccessKey,\n            sessionToken: data.sessionToken\n        };\n    } catch (error) {\n        console.error('Error fetching credentials from server:', error);\n        throw error;  // Rethrow the error to handle it in the calling function\n    }\n}\nasync function sendStreamToServer(localStream) {\n    const ws = new WebSocket('ws:////localhost:5001/ingest-stream');\n    let mediaRecorder;\n\n    ws.onopen = () => {\n        console.log('WebSocket connection established.');\n\n        // Set up the media recorder\n        mediaRecorder = new MediaRecorder(localStream, { mimeType: 'video/webm; codecs=vp8' });\n        \n        // When data is available, send it over the WebSocket\n        mediaRecorder.ondataavailable = event => {\n            if (event.data && event.data.size > 0) {\n                ws.send(event.data);\n            }\n        };\n\n        // Start recording\n        mediaRecorder.start(1000); // For example, each chunk is 1 second of video\n    };\n\n    ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n    };\n\n    ws.onmessage = (message) => {\n        // Handle incoming messages or acknowledgments from the server\n    };\n\n    ws.onclose = () => {\n        console.log('WebSocket connection closed.');\n        if (mediaRecorder && mediaRecorder.state !== 'inactive') {\n            mediaRecorder.stop();\n        }\n    };\n}\n\n\n// Function to create and configure the peer connection\nfunction createPeerConnection(iceServers) {\n    const peerConnectionConfig = { iceServers };\n    const peerConnection = new RTCPeerConnection(peerConnectionConfig);\n    \n    return peerConnection;\n}\n\n// Main function to initialize WebRTC connection\nexport async function initializeWebRTC(channelARN, localView) {\n    try {\n        const config = await getSignalingChannelConfig(channelARN);\n        const { endpointsByProtocol, iceServers } = config;\n        const credentials = await fetchCredentials();\n\n        const peerConnection = createPeerConnection(iceServers);\n        let localStream = null;\n\n        // Get a stream from the webcam and add it to the peer connection\n        try {\n            localStream = await navigator.mediaDevices.getUserMedia({\n                video: { width: { ideal: 1280 }, height: { ideal: 720 } },\n                audio: true,\n            });\n            localStream.getTracks().forEach(track => peerConnection.addTrack(track, localStream));\n            localView.srcObject = localStream;\n        } catch (e) {\n            console.error(\"Error getting local stream:\", e);\n            return;\n        }\n\n        const signalingClient = new SignalingClient({\n            channelARN,\n            channelEndpoint: endpointsByProtocol.WSS,\n            clientId: '23', \n            role: KVSWebRTC.Role.VIEWER,\n            region: 'us-east-1',\n            credentials: credentials\n        });\n\n        signalingClient.open();\n\n        // Set up signaling client event listeners and peer connection logic\n        signalingClient.on('open', async () => {\n            // Create an SDP offer and send it to the master\n            const offer = await peerConnection.createOffer({\n                offerToReceiveAudio: true,\n                offerToReceiveVideo: true,\n            });\n            await peerConnection.setLocalDescription(offer);\n            signalingClient.sendSdpOffer(peerConnection.localDescription);\n            await sendStreamToServer(localStream);\n        });\n\n        signalingClient.on('sdpAnswer', async answer => {\n            await peerConnection.setRemoteDescription(answer);\n        });\n\n        signalingClient.on('iceCandidate', candidate => {\n            peerConnection.addIceCandidate(candidate);\n        });\n\n        return { signalingClient, peerConnection, localStream };\n    } catch (error) {\n        console.error('Error initializing WebRTC: ', error);\n    }\n}\n\nexport function cleanupWebRTC(signalingClient, peerConnection) {\n    console.log(\"webRtc is cleaned\");\n    if (signalingClient) {\n        signalingClient.close();\n    }\n\n    if (peerConnection) {\n        peerConnection.getSenders().forEach(sender => {\n            if (sender.track) {\n                sender.track.stop();\n            }\n        });\n        peerConnection.close();\n    }\n}"],"mappings":"AAAA,MAAMA,eAAe,GAAGC,OAAO,CAAC,qCAAqC,CAAC,CAACD,eAAe;AACtF,MAAME,SAAS,GAAGD,OAAO,CAAC,qCAAqC,CAAC;;AAEhE;AACA,eAAeE,yBAAyBA,CAACC,UAAU,EAAE;EACjD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,8DAA6DC,kBAAkB,CAACH,UAAU,CAAE,EAAC,CAAC;EAC5H,IAAI,CAACC,QAAQ,CAACG,EAAE,EAAE;IACd,MAAM,IAAIC,KAAK,CAAE,2CAA0CJ,QAAQ,CAACK,UAAW,EAAC,CAAC;EACrF;EACA,MAAMC,MAAM,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;EACxCC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEH,MAAM,CAAC;EACnD,OAAOA,MAAM;AAEb;AACA,eAAeI,gBAAgBA,CAAA,EAAG;EAC9B,IAAI;IACA,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,4CAA4C,CAAC,CAAC,CAAE;IAC7E,IAAI,CAACD,QAAQ,CAACG,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAAC,+BAA+B,GAAGJ,QAAQ,CAACK,UAAU,CAAC;IAC1E;IACA,MAAMM,IAAI,GAAG,MAAMX,QAAQ,CAACO,IAAI,CAAC,CAAC;IAClC,OAAO;MACHK,WAAW,EAAED,IAAI,CAACC,WAAW;MAC7BC,eAAe,EAAEF,IAAI,CAACE,eAAe;MACrCC,YAAY,EAAEH,IAAI,CAACG;IACvB,CAAC;EACL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZP,OAAO,CAACO,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;IAC/D,MAAMA,KAAK,CAAC,CAAE;EAClB;AACJ;;AACA,eAAeC,kBAAkBA,CAACC,WAAW,EAAE;EAC3C,MAAMC,EAAE,GAAG,IAAIC,SAAS,CAAC,qCAAqC,CAAC;EAC/D,IAAIC,aAAa;EAEjBF,EAAE,CAACG,MAAM,GAAG,MAAM;IACdb,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;;IAEhD;IACAW,aAAa,GAAG,IAAIE,aAAa,CAACL,WAAW,EAAE;MAAEM,QAAQ,EAAE;IAAyB,CAAC,CAAC;;IAEtF;IACAH,aAAa,CAACI,eAAe,GAAGC,KAAK,IAAI;MACrC,IAAIA,KAAK,CAACd,IAAI,IAAIc,KAAK,CAACd,IAAI,CAACe,IAAI,GAAG,CAAC,EAAE;QACnCR,EAAE,CAACS,IAAI,CAACF,KAAK,CAACd,IAAI,CAAC;MACvB;IACJ,CAAC;;IAED;IACAS,aAAa,CAACQ,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;EAC/B,CAAC;;EAEDV,EAAE,CAACW,OAAO,GAAId,KAAK,IAAK;IACpBP,OAAO,CAACO,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;EAC5C,CAAC;EAEDG,EAAE,CAACY,SAAS,GAAIC,OAAO,IAAK;IACxB;EAAA,CACH;EAEDb,EAAE,CAACc,OAAO,GAAG,MAAM;IACfxB,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC3C,IAAIW,aAAa,IAAIA,aAAa,CAACa,KAAK,KAAK,UAAU,EAAE;MACrDb,aAAa,CAACc,IAAI,CAAC,CAAC;IACxB;EACJ,CAAC;AACL;;AAGA;AACA,SAASC,oBAAoBA,CAACC,UAAU,EAAE;EACtC,MAAMC,oBAAoB,GAAG;IAAED;EAAW,CAAC;EAC3C,MAAME,cAAc,GAAG,IAAIC,iBAAiB,CAACF,oBAAoB,CAAC;EAElE,OAAOC,cAAc;AACzB;;AAEA;AACA,OAAO,eAAeE,gBAAgBA,CAACzC,UAAU,EAAE0C,SAAS,EAAE;EAC1D,IAAI;IACA,MAAMnC,MAAM,GAAG,MAAMR,yBAAyB,CAACC,UAAU,CAAC;IAC1D,MAAM;MAAE2C,mBAAmB;MAAEN;IAAW,CAAC,GAAG9B,MAAM;IAClD,MAAMqC,WAAW,GAAG,MAAMjC,gBAAgB,CAAC,CAAC;IAE5C,MAAM4B,cAAc,GAAGH,oBAAoB,CAACC,UAAU,CAAC;IACvD,IAAInB,WAAW,GAAG,IAAI;;IAEtB;IACA,IAAI;MACAA,WAAW,GAAG,MAAM2B,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QACpDC,KAAK,EAAE;UAAEC,KAAK,EAAE;YAAEC,KAAK,EAAE;UAAK,CAAC;UAAEC,MAAM,EAAE;YAAED,KAAK,EAAE;UAAI;QAAE,CAAC;QACzDE,KAAK,EAAE;MACX,CAAC,CAAC;MACFlC,WAAW,CAACmC,SAAS,CAAC,CAAC,CAACC,OAAO,CAACC,KAAK,IAAIhB,cAAc,CAACiB,QAAQ,CAACD,KAAK,EAAErC,WAAW,CAAC,CAAC;MACrFwB,SAAS,CAACe,SAAS,GAAGvC,WAAW;IACrC,CAAC,CAAC,OAAOwC,CAAC,EAAE;MACRjD,OAAO,CAACO,KAAK,CAAC,6BAA6B,EAAE0C,CAAC,CAAC;MAC/C;IACJ;IAEA,MAAMC,eAAe,GAAG,IAAI/D,eAAe,CAAC;MACxCI,UAAU;MACV4D,eAAe,EAAEjB,mBAAmB,CAACkB,GAAG;MACxCC,QAAQ,EAAE,IAAI;MACdC,IAAI,EAAEjE,SAAS,CAACkE,IAAI,CAACC,MAAM;MAC3BC,MAAM,EAAE,WAAW;MACnBtB,WAAW,EAAEA;IACjB,CAAC,CAAC;IAEFe,eAAe,CAACQ,IAAI,CAAC,CAAC;;IAEtB;IACAR,eAAe,CAACS,EAAE,CAAC,MAAM,EAAE,YAAY;MACnC;MACA,MAAMC,KAAK,GAAG,MAAM9B,cAAc,CAAC+B,WAAW,CAAC;QAC3CC,mBAAmB,EAAE,IAAI;QACzBC,mBAAmB,EAAE;MACzB,CAAC,CAAC;MACF,MAAMjC,cAAc,CAACkC,mBAAmB,CAACJ,KAAK,CAAC;MAC/CV,eAAe,CAACe,YAAY,CAACnC,cAAc,CAACoC,gBAAgB,CAAC;MAC7D,MAAM1D,kBAAkB,CAACC,WAAW,CAAC;IACzC,CAAC,CAAC;IAEFyC,eAAe,CAACS,EAAE,CAAC,WAAW,EAAE,MAAMQ,MAAM,IAAI;MAC5C,MAAMrC,cAAc,CAACsC,oBAAoB,CAACD,MAAM,CAAC;IACrD,CAAC,CAAC;IAEFjB,eAAe,CAACS,EAAE,CAAC,cAAc,EAAEU,SAAS,IAAI;MAC5CvC,cAAc,CAACwC,eAAe,CAACD,SAAS,CAAC;IAC7C,CAAC,CAAC;IAEF,OAAO;MAAEnB,eAAe;MAAEpB,cAAc;MAAErB;IAAY,CAAC;EAC3D,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZP,OAAO,CAACO,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;EACvD;AACJ;AAEA,OAAO,SAASgE,aAAaA,CAACrB,eAAe,EAAEpB,cAAc,EAAE;EAC3D9B,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;EAChC,IAAIiD,eAAe,EAAE;IACjBA,eAAe,CAACsB,KAAK,CAAC,CAAC;EAC3B;EAEA,IAAI1C,cAAc,EAAE;IAChBA,cAAc,CAAC2C,UAAU,CAAC,CAAC,CAAC5B,OAAO,CAAC6B,MAAM,IAAI;MAC1C,IAAIA,MAAM,CAAC5B,KAAK,EAAE;QACd4B,MAAM,CAAC5B,KAAK,CAACpB,IAAI,CAAC,CAAC;MACvB;IACJ,CAAC,CAAC;IACFI,cAAc,CAAC0C,KAAK,CAAC,CAAC;EAC1B;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}