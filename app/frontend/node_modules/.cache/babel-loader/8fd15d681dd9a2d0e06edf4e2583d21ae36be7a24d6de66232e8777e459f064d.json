{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ROG\\\\Desktop\\\\COSC499\\\\year-long-project-team-6\\\\app\\\\frontend\\\\src\\\\pages\\\\Post.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"../component/CSS/post.css\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { initializeWebRTC, cleanupWebRTC } from './webrtc';\nimport { uploadVideo } from './webrtc';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction PostPage() {\n  _s();\n  var _location$state;\n  const [showWebRTC, setShowWebRTC] = useState(false);\n  const [userId, setUserId] = useState(\"\");\n  const [selectedGroup, setSelectedGroup] = useState(\"\");\n  const [postHistory, setPostHistory] = useState([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const signalingClientRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const localView = useRef(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [recordedChunks, setRecordedChunks] = useState([]);\n  const navigate = useNavigate();\n  const [isRecordingStopped, setIsRecordingStopped] = useState(false);\n  const [recordedVideo, setRecordedVideo] = useState(null);\n  const [blurFace, setBlurFace] = useState(false);\n  const [groups, setGroups] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const groupIdFromState = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.groupId;\n  console.log('groupid navigated:', groupIdFromState);\n  const channelARN = 'arn:aws:kinesisvideo:us-east-1:466618866658:channel/webrtc-499/1701571372732';\n  useEffect(() => {\n    const sessionUser = sessionStorage.getItem('user');\n    console.log(\"Sessopm User: \" + sessionUser);\n    if (!sessionUser) {\n      navigate('/login');\n    } else {\n      const user = JSON.parse(sessionUser);\n      setUserId(user.userid);\n      console.log(\"User Id: \" + user.userid);\n    }\n  }, []);\n  useEffect(() => {\n    if (userId) {\n      fetch(`http://localhost:5001/post-history/${userId}`).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      }).then(data => {\n        const arr = [];\n        for (let i in data) {\n          let o = {};\n          o[i] = data[i];\n          arr.push(o);\n        }\n        console.log(arr[0].data);\n        setPostHistory(arr[0].data);\n      }).catch(error => console.error('Error fetching post history:', error));\n\n      // Fetch groups\n      fetch(`http://localhost:5001/user-groups/${userId}`).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok for fetching user groups');\n        }\n        return response.json();\n      }).then(groupsData => {\n        setGroups(groupsData);\n        const selectedGroupFromState = groupsData.find(group => group.groupid == groupIdFromState);\n        console.log(selectedGroupFromState);\n        if (selectedGroupFromState) {\n          setSelectedGroup(selectedGroupFromState.groupid);\n        }\n      }).catch(error => console.error('Error fetching user groups:', error));\n    }\n  }, [userId]);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setIsLoading(true);\n    const formData = new FormData(event.target);\n    let videoKey = '';\n    const postTitle = formData.get('post_title').trim(); // Trim whitespace\n    const postText = formData.get('post_text').trim(); // Trim whitespace\n    const groupid = formData.get('groupid'); // Assuming 'groupid' is the name attribute for the group select field\n\n    // Validation checks\n    if (!postTitle) {\n      setIsLoading(false);\n      alert('Please enter a title for your video.');\n      return;\n    }\n    if (!postText) {\n      setIsLoading(false);\n      alert('Please enter a description for your video.');\n      return;\n    }\n    if (!groupid || groupid === \"\") {\n      setIsLoading(false);\n      alert('Please choose a group.');\n      return;\n    }\n    if (recordedVideo) {\n      try {\n        const uploadResult = await uploadVideo(recordedVideo, formData.get('post_title'));\n        console.log('Video uploaded successfully:', uploadResult);\n        videoKey = uploadResult.key;\n      } catch (uploadError) {\n        console.error('Failed to upload video:', uploadError);\n        return;\n      }\n    } else {\n      setIsLoading(false);\n      alert('Please record your video.');\n      return;\n    }\n    const postData = {\n      post_title: formData.get('post_title'),\n      post_text: formData.get('post_text'),\n      s3_content_key: videoKey,\n      userid: userId,\n      blurFace: blurFace,\n      group_id: selectedGroup\n    };\n    console.log(\"postData to be sent:\", postData); // Add this line for debugging\n\n    fetch('http://localhost:5001/add-post', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(postData)\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.text();\n    }).then(data => {\n      console.log('Success:', data);\n      navigate('/');\n    }).catch(error => {\n      console.error('Error:', error);\n    }).finally(() => {\n      setIsLoading(false);\n    });\n    ;\n  };\n  const handleSortChange = event => {\n    const sortOrder = event.target.value;\n    setPostHistory(prevHistory => {\n      return [...prevHistory].sort((a, b) => {\n        const dateA = new Date(a.post_date);\n        const dateB = new Date(b.post_date);\n        return sortOrder === 'Asc' ? dateA - dateB : dateB - dateA;\n      });\n    });\n  };\n  useEffect(() => {\n    console.log('recordedChunks updated:', recordedChunks);\n  }, [recordedChunks]);\n  // Temporary array to hold recorded chunks, outside of the function\n  let tempRecordedChunks = [];\n  const handleTogglePlay = async () => {\n    console.log('Click - isPlaying:', isPlaying, 'Refs:', localView.current);\n    if (!isPlaying) {\n      setTimeout(async () => {\n        if (localView.current) {\n          try {\n            const webrtc = await initializeWebRTC(channelARN, localView.current);\n            signalingClientRef.current = webrtc.signalingClient;\n            peerConnectionRef.current = webrtc.peerConnection;\n\n            // Initialize MediaRecorder here\n            const stream = localView.current.srcObject; // Assuming this is your local stream\n            console.log('stream', stream);\n            const recorder = new MediaRecorder(stream);\n            setMediaRecorder(recorder);\n            recorder.ondataavailable = event => {\n              if (event.data.size > 0) {\n                tempRecordedChunks.push(event.data);\n              }\n            };\n            recorder.onstop = async () => {\n              const blob = new Blob(tempRecordedChunks, {\n                type: 'video/webm'\n              });\n              setRecordedVideo(blob); // Assuming you have a state called recordedVideo\n              tempRecordedChunks = [];\n            };\n            setShowWebRTC(true);\n            recorder.start();\n          } catch (error) {\n            console.error('Error initializing WebRTC: ', error);\n          }\n        } else {\n          console.log('Refs are not set:', localView.current);\n        }\n      }, 100);\n    } else {\n      if (mediaRecorder) {\n        mediaRecorder.stop();\n      }\n      cleanupWebRTC(signalingClientRef.current, peerConnectionRef.current);\n      signalingClientRef.current = null;\n      peerConnectionRef.current = null;\n      setShowWebRTC(false);\n    }\n    setIsPlaying(!isPlaying);\n  };\n  const handleClear = () => {\n    // Reset form fields\n    document.getElementById(\"postform\").reset(); // Replace \"yourFormId\" with the actual ID of your form\n\n    // Stop recording if it's in progress\n    if (isPlaying && mediaRecorder && mediaRecorder.state !== \"inactive\") {\n      mediaRecorder.stop();\n    }\n\n    // Reset all relevant states to their initial values\n    setShowWebRTC(false);\n    setIsPlaying(false);\n    setIsRecordingStopped(false);\n    setRecordedVideo(null);\n    setBlurFace(false);\n\n    // Cleanup WebRTC if needed\n    if (signalingClientRef.current || peerConnectionRef.current) {\n      cleanupWebRTC(signalingClientRef.current, peerConnectionRef.current);\n      signalingClientRef.current = null;\n      peerConnectionRef.current = null;\n    }\n\n    // Clear recorded video URL to avoid memory leaks\n    if (recordedVideo) {\n      URL.revokeObjectURL(recordedVideo);\n    }\n  };\n  function handleGroupChange(event) {\n    setSelectedGroup(event.target.value);\n  }\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    return date.toISOString().split('T')[0];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"send\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Send Your Post \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"input\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          id: \"postform\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"main\",\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"videoContainer\",\n              children: [isPlaying && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(\"video\", {\n                  ref: localView,\n                  style: {\n                    width: '640px'\n                  },\n                  autoPlay: true,\n                  playsInline: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false), recordedVideo ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"video\", {\n                  style: {\n                    width: '640px'\n                  },\n                  controls: true,\n                  children: /*#__PURE__*/_jsxDEV(\"source\", {\n                    src: URL.createObjectURL(recordedVideo),\n                    type: \"video/webm\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 287,\n                    columnNumber: 33\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 33\n              }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                id: \"record_button\",\n                type: \"button\",\n                onClick: handleTogglePlay,\n                children: isPlaying ? 'Stop' : 'Start Recording'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"EnterText\",\n              id: \"text_one\",\n              children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n                children: \"Name your new video\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"VName\",\n                placeholder: \"Video Name\",\n                name: \"post_title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 299,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"EnterText\",\n              id: \"text_two\",\n              children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n                children: \"Description of Your Video\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"Description\",\n                placeholder: \"Describe your video\",\n                name: \"post_text\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 314,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"group\",\n              children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n                children: \"Choose a Group\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 317,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"GName\",\n                name: \"groupid\",\n                value: selectedGroup,\n                onChange: handleGroupChange,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Choose a group\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 319,\n                  columnNumber: 33\n                }, this), groups.map(group => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: group.groupid,\n                  children: group.groupname\n                }, group.groupname, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 321,\n                  columnNumber: 41\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 318,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"blur\",\n            children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n              children: \"BlurFace\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"blurFace\",\n              checked: blurFace,\n              onChange: e => setBlurFace(e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 327,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            value: \"Submit\",\n            name: \"submit\",\n            id: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: handleClear,\n            id: \"submit\",\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Submitting...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 342,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"HistroyBar\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          id: \"histroyTable\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"History\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 348,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                id: \"Sort\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"order\",\n                  name: \"order\",\n                  onChange: handleSortChange,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"Des\",\n                    children: \"Descending\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 351,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"Asc\",\n                    children: \"Ascending\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 352,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 350,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: postHistory.map((post, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                id: \"img\",\n                children: `${post.post_title}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 361,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                id: \"date\",\n                children: formatDate(post.post_date)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 364,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 267,\n    columnNumber: 9\n  }, this);\n}\n_s(PostPage, \"A7aEqPOJwlZAnwX+QjdrVX+itxY=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = PostPage;\nexport default PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useNavigate","useLocation","initializeWebRTC","cleanupWebRTC","uploadVideo","jsxDEV","_jsxDEV","Fragment","_Fragment","PostPage","_s","_location$state","showWebRTC","setShowWebRTC","userId","setUserId","selectedGroup","setSelectedGroup","postHistory","setPostHistory","isPlaying","setIsPlaying","signalingClientRef","peerConnectionRef","localView","mediaRecorder","setMediaRecorder","recordedChunks","setRecordedChunks","navigate","isRecordingStopped","setIsRecordingStopped","recordedVideo","setRecordedVideo","blurFace","setBlurFace","groups","setGroups","isLoading","setIsLoading","location","groupIdFromState","state","groupId","console","log","channelARN","sessionUser","sessionStorage","getItem","user","JSON","parse","userid","fetch","then","response","ok","Error","status","json","data","arr","i","o","push","catch","error","groupsData","selectedGroupFromState","find","group","groupid","handleSubmit","event","preventDefault","formData","FormData","target","videoKey","postTitle","get","trim","postText","alert","uploadResult","key","uploadError","postData","post_title","post_text","s3_content_key","group_id","method","headers","body","stringify","text","finally","handleSortChange","sortOrder","value","prevHistory","sort","a","b","dateA","Date","post_date","dateB","tempRecordedChunks","handleTogglePlay","current","setTimeout","webrtc","signalingClient","peerConnection","stream","srcObject","recorder","MediaRecorder","ondataavailable","size","onstop","blob","Blob","type","start","stop","handleClear","document","getElementById","reset","URL","revokeObjectURL","handleGroupChange","formatDate","dateString","date","toISOString","split","id","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","ref","style","width","autoPlay","playsInline","controls","src","createObjectURL","onClick","placeholder","name","onChange","map","groupname","checked","e","post","index","_c","$RefreshReg$"],"sources":["C:/Users/ROG/Desktop/COSC499/year-long-project-team-6/app/frontend/src/pages/Post.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport \"../component/CSS/post.css\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { initializeWebRTC, cleanupWebRTC } from './webrtc';\r\nimport { uploadVideo } from './webrtc';\r\n\r\nfunction PostPage() {\r\n    const [showWebRTC, setShowWebRTC] = useState(false);\r\n    const [userId, setUserId] = useState(\"\");\r\n    const [selectedGroup, setSelectedGroup] = useState(\"\");\r\n    const [postHistory, setPostHistory] = useState([]);\r\n    const [isPlaying, setIsPlaying] = useState(false);\r\n    const signalingClientRef = useRef(null);\r\n    const peerConnectionRef = useRef(null);\r\n    const localView = useRef(null);\r\n    const [mediaRecorder, setMediaRecorder] = useState(null);\r\n    const [recordedChunks, setRecordedChunks] = useState([]);\r\n    const navigate = useNavigate();\r\n    const [isRecordingStopped, setIsRecordingStopped] = useState(false);\r\n    const [recordedVideo, setRecordedVideo] = useState(null);\r\n    const [blurFace, setBlurFace] = useState(false);\r\n    const [groups, setGroups] = useState([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const location = useLocation();\r\n    const groupIdFromState = location.state?.groupId;\r\n    console.log('groupid navigated:',groupIdFromState)\r\n    \r\n\r\n\r\n    const channelARN = 'arn:aws:kinesisvideo:us-east-1:466618866658:channel/webrtc-499/1701571372732';\r\n    useEffect(() => {\r\n        const sessionUser = sessionStorage.getItem('user');\r\n        console.log(\"Sessopm User: \" + sessionUser);\r\n        if (!sessionUser) {\r\n            navigate('/login');\r\n        } else {\r\n            const user = JSON.parse(sessionUser);\r\n            setUserId(user.userid);\r\n            console.log(\"User Id: \" + user.userid);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (userId) {\r\n            fetch(`http://localhost:5001/post-history/${userId}`)\r\n                .then(response => {\r\n                    if (!response.ok) {\r\n                        throw new Error(`HTTP error! status: ${response.status}`);\r\n                    }\r\n                    return response.json();\r\n                })\r\n                .then(data => {\r\n                    const arr = [];\r\n                    for (let i in data) {\r\n                        let o = {};\r\n                        o[i] = data[i];\r\n                        arr.push(o);\r\n                    }\r\n                    console.log(arr[0].data);\r\n                    setPostHistory(arr[0].data);\r\n                })\r\n                .catch(error => console.error('Error fetching post history:', error));\r\n\r\n            // Fetch groups\r\n            fetch(`http://localhost:5001/user-groups/${userId}`)\r\n                .then(response => {\r\n                    if (!response.ok) {\r\n                        throw new Error('Network response was not ok for fetching user groups');\r\n                    }\r\n                    return response.json();\r\n                })\r\n                .then(groupsData => {\r\n                    setGroups(groupsData);\r\n                    const selectedGroupFromState = groupsData.find(group => group.groupid == groupIdFromState);\r\n                    console.log(selectedGroupFromState);\r\n                    if (selectedGroupFromState) {\r\n                        setSelectedGroup(selectedGroupFromState.groupid);\r\n                    }\r\n                })\r\n                .catch(error => console.error('Error fetching user groups:', error));\r\n        }\r\n    }, [userId]);\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        setIsLoading(true);\r\n        const formData = new FormData(event.target);\r\n        let videoKey = '';\r\n        const postTitle = formData.get('post_title').trim(); // Trim whitespace\r\n        const postText = formData.get('post_text').trim(); // Trim whitespace\r\n        const groupid = formData.get('groupid'); // Assuming 'groupid' is the name attribute for the group select field\r\n\r\n        // Validation checks\r\n        if (!postTitle) {\r\n            setIsLoading(false);\r\n            alert('Please enter a title for your video.');\r\n            return; \r\n        }\r\n    \r\n        if (!postText) {\r\n            setIsLoading(false);\r\n            alert('Please enter a description for your video.');\r\n            return; \r\n        }\r\n    \r\n        if (!groupid || groupid === \"\") {\r\n            setIsLoading(false);\r\n            alert('Please choose a group.');\r\n            return; \r\n        }\r\n        if (recordedVideo) {\r\n            try {\r\n                const uploadResult = await uploadVideo(recordedVideo, formData.get('post_title'));\r\n                console.log('Video uploaded successfully:', uploadResult);\r\n                videoKey = uploadResult.key;\r\n            } catch (uploadError) {\r\n                console.error('Failed to upload video:', uploadError);\r\n                return; \r\n            }\r\n        }else{\r\n            setIsLoading(false);\r\n            alert('Please record your video.');\r\n            \r\n            return; \r\n        }\r\n        \r\n        const postData = {\r\n            post_title: formData.get('post_title'),\r\n            post_text: formData.get('post_text'),\r\n            s3_content_key: videoKey,\r\n            userid: userId,\r\n            blurFace: blurFace,\r\n            group_id: selectedGroup\r\n        };\r\n\r\n\r\n        console.log(\"postData to be sent:\", postData); // Add this line for debugging\r\n\r\n        fetch('http://localhost:5001/add-post', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(postData)\r\n        })\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                return response.text();\r\n            })\r\n            .then(data => {\r\n                console.log('Success:', data);\r\n                navigate('/');\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            })\r\n            .finally(() => {\r\n                setIsLoading(false);\r\n            });;\r\n    }\r\n\r\n    const handleSortChange = (event) => {\r\n        const sortOrder = event.target.value;\r\n        setPostHistory(prevHistory => {\r\n            return [...prevHistory].sort((a, b) => {\r\n                const dateA = new Date(a.post_date);\r\n                const dateB = new Date(b.post_date);\r\n                return sortOrder === 'Asc' ? dateA - dateB : dateB - dateA;\r\n            });\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log('recordedChunks updated:', recordedChunks);\r\n    }, [recordedChunks]);\r\n    // Temporary array to hold recorded chunks, outside of the function\r\n    let tempRecordedChunks = [];\r\n\r\n    const handleTogglePlay = async () => {\r\n        console.log('Click - isPlaying:', isPlaying, 'Refs:', localView.current);\r\n\r\n        if (!isPlaying) {\r\n            setTimeout(async () => {\r\n                if (localView.current) {\r\n                    try {\r\n                        const webrtc = await initializeWebRTC(channelARN, localView.current);\r\n                        signalingClientRef.current = webrtc.signalingClient;\r\n                        peerConnectionRef.current = webrtc.peerConnection;\r\n\r\n                        // Initialize MediaRecorder here\r\n                        const stream = localView.current.srcObject; // Assuming this is your local stream\r\n                        console.log('stream', stream);\r\n\r\n                        const recorder = new MediaRecorder(stream);\r\n                        setMediaRecorder(recorder);\r\n\r\n                        recorder.ondataavailable = (event) => {\r\n                            if (event.data.size > 0) {\r\n                                tempRecordedChunks.push(event.data);\r\n                            }\r\n                        };\r\n\r\n                        recorder.onstop = async () => {\r\n                            const blob = new Blob(tempRecordedChunks, { type: 'video/webm' });\r\n                            setRecordedVideo(blob); // Assuming you have a state called recordedVideo\r\n                            tempRecordedChunks = [];\r\n                        };\r\n\r\n\r\n                        setShowWebRTC(true);\r\n                        recorder.start();\r\n\r\n                    } catch (error) {\r\n                        console.error('Error initializing WebRTC: ', error);\r\n                    }\r\n                } else {\r\n                    console.log('Refs are not set:', localView.current);\r\n                }\r\n            }, 100);\r\n        } else {\r\n            if (mediaRecorder) {\r\n                mediaRecorder.stop();\r\n            }\r\n            cleanupWebRTC(signalingClientRef.current, peerConnectionRef.current);\r\n            signalingClientRef.current = null;\r\n            peerConnectionRef.current = null;\r\n            setShowWebRTC(false);\r\n        }\r\n        setIsPlaying(!isPlaying);\r\n    };\r\n    const handleClear = () => {\r\n        // Reset form fields\r\n        document.getElementById(\"postform\").reset(); // Replace \"yourFormId\" with the actual ID of your form\r\n    \r\n        // Stop recording if it's in progress\r\n        if (isPlaying && mediaRecorder && mediaRecorder.state !== \"inactive\") {\r\n            mediaRecorder.stop();\r\n        }\r\n    \r\n        // Reset all relevant states to their initial values\r\n        setShowWebRTC(false);\r\n        setIsPlaying(false);\r\n        setIsRecordingStopped(false);\r\n        setRecordedVideo(null);\r\n        setBlurFace(false);\r\n    \r\n        // Cleanup WebRTC if needed\r\n        if (signalingClientRef.current || peerConnectionRef.current) {\r\n            cleanupWebRTC(signalingClientRef.current, peerConnectionRef.current);\r\n            signalingClientRef.current = null;\r\n            peerConnectionRef.current = null;\r\n        }\r\n    \r\n        // Clear recorded video URL to avoid memory leaks\r\n        if (recordedVideo) {\r\n            URL.revokeObjectURL(recordedVideo);\r\n        }\r\n    };\r\n    function handleGroupChange(event) {\r\n        setSelectedGroup(event.target.value);\r\n    }\r\n    const formatDate = (dateString) => {\r\n        const date = new Date(dateString);\r\n        return date.toISOString().split('T')[0];\r\n    };\r\n    return (\r\n        <div id='page'>\r\n            <div id=\"send\">\r\n                <h2>Send Your Post </h2>\r\n            </div>\r\n            <div className=\"flex-container\">\r\n                <div id=\"input\">\r\n                    <form onSubmit={handleSubmit} id=\"postform\">\r\n                        <div id=\"main\" className=\"main\">\r\n                            <div id=\"videoContainer\">\r\n                                {isPlaying && (\r\n                                    <>\r\n                                        <video ref={localView} style={{ width: '640px'}} autoPlay playsInline />\r\n\r\n                                    </>\r\n                                )}\r\n                               \r\n\r\n                                {recordedVideo ? (\r\n                                <div>\r\n                                <video style={{ width: '640px'}} controls>\r\n                                <source src={URL.createObjectURL(recordedVideo)} type=\"video/webm\" />\r\n                                 </video>\r\n                            </div>\r\n                            ) : (\r\n                                <button id=\"record_button\" type='button' onClick={handleTogglePlay}>{isPlaying ? 'Stop' : 'Start Recording'}</button>\r\n                            )}\r\n\r\n\r\n                            </div>\r\n\r\n                            <div className=\"EnterText\" id=\"text_one\">\r\n                                <legend>Name your new video</legend>\r\n                                <input type=\"text\" id=\"VName\" placeholder=\"Video Name\" name=\"post_title\" />\r\n                            </div>\r\n                            {/*\r\n                            <div className=\"EnterText\">\r\n                                <legend>Choose a Group</legend>\r\n                                <select id=\"GName\" name=\"GName\" value={selectedGroup} onChange={handleGroupChange}>\r\n                                    <option value=\"\"></option>\r\n                                    <option value=\"Sender\">Sender</option>\r\n                                    <option value=\"Doctor\">Doctor</option>\r\n                                    <option value=\"Professor\">Professor</option>\r\n                                </select>\r\n                            </div>\r\n                        */}\r\n                            <div className=\"EnterText\" id=\"text_two\">\r\n                                <legend>Description of Your Video</legend>\r\n                                <input type=\"text\" id=\"Description\" placeholder=\"Describe your video\" name=\"post_text\" />\r\n                            </div>\r\n                            <div className=\"group\">\r\n                                <legend>Choose a Group</legend>\r\n                                <select id=\"GName\" name=\"groupid\" value={selectedGroup} onChange={handleGroupChange}>\r\n                                <option value=\"\"  >Choose a group</option>\r\n                                    {groups.map(group => (\r\n                                        <option key={group.groupname} value={group.groupid}>{group.groupname}</option>\r\n                                    ))}\r\n                                </select>\r\n                            </div>\r\n\r\n                        </div>\r\n                        <div className=\"blur\">\r\n                                <legend>\r\n                                    BlurFace  \r\n                                </legend>   \r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                     id=\"blurFace\"\r\n                                     checked={blurFace}\r\n                                     onChange={(e) => setBlurFace(e.target.checked)}\r\n                                    />\r\n                            </div>\r\n                            <button type=\"submit\" value=\"Submit\" name=\"submit\" id=\"submit\">Submit</button>\r\n                            <button type=\"button\" onClick={handleClear} id=\"submit\">Clear</button>\r\n\r\n                    </form>\r\n                    {isLoading && <div><h3>Submitting...</h3></div>}\r\n                </div>\r\n                <div id=\"HistroyBar\">\r\n                    <table id=\"histroyTable\">\r\n                        <thead>\r\n                            <tr>\r\n                                <td>History</td>\r\n                                <td id=\"Sort\">\r\n                                    <select id=\"order\" name=\"order\" onChange={handleSortChange}>\r\n                                        <option value=\"Des\">Descending</option>\r\n                                        <option value=\"Asc\">Ascending</option>\r\n                                    </select>\r\n                                </td>\r\n                            </tr>\r\n\r\n                        </thead>\r\n                        <tbody>\r\n                            {postHistory.map((post, index) => (\r\n                                <tr key={index}>\r\n                                    <td id=\"img\">\r\n                                        {`${post.post_title}`}\r\n                                    </td>\r\n                                    <td id=\"date\">{formatDate(post.post_date)}</td>\r\n                                </tr>\r\n                            ))}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PostPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,2BAA2B;AAClC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,SAASC,gBAAgB,EAAEC,aAAa,QAAQ,UAAU;AAC1D,SAASC,WAAW,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEvC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAAA,IAAAC,eAAA;EAChB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACgB,MAAM,EAAEC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACkB,aAAa,EAAEC,gBAAgB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACsB,SAAS,EAAEC,YAAY,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMwB,kBAAkB,GAAGvB,MAAM,CAAC,IAAI,CAAC;EACvC,MAAMwB,iBAAiB,GAAGxB,MAAM,CAAC,IAAI,CAAC;EACtC,MAAMyB,SAAS,GAAGzB,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAAC0B,aAAa,EAAEC,gBAAgB,CAAC,GAAG5B,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAAC6B,cAAc,EAAEC,iBAAiB,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM+B,QAAQ,GAAG7B,WAAW,CAAC,CAAC;EAC9B,MAAM,CAAC8B,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGjC,QAAQ,CAAC,KAAK,CAAC;EACnE,MAAM,CAACkC,aAAa,EAAEC,gBAAgB,CAAC,GAAGnC,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACoC,QAAQ,EAAEC,WAAW,CAAC,GAAGrC,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACsC,MAAM,EAAEC,SAAS,CAAC,GAAGvC,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACwC,SAAS,EAAEC,YAAY,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM0C,QAAQ,GAAGvC,WAAW,CAAC,CAAC;EAC9B,MAAMwC,gBAAgB,IAAA9B,eAAA,GAAG6B,QAAQ,CAACE,KAAK,cAAA/B,eAAA,uBAAdA,eAAA,CAAgBgC,OAAO;EAChDC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAACJ,gBAAgB,CAAC;EAIlD,MAAMK,UAAU,GAAG,8EAA8E;EACjGjD,SAAS,CAAC,MAAM;IACZ,MAAMkD,WAAW,GAAGC,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC;IAClDL,OAAO,CAACC,GAAG,CAAC,gBAAgB,GAAGE,WAAW,CAAC;IAC3C,IAAI,CAACA,WAAW,EAAE;MACdlB,QAAQ,CAAC,QAAQ,CAAC;IACtB,CAAC,MAAM;MACH,MAAMqB,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACL,WAAW,CAAC;MACpChC,SAAS,CAACmC,IAAI,CAACG,MAAM,CAAC;MACtBT,OAAO,CAACC,GAAG,CAAC,WAAW,GAAGK,IAAI,CAACG,MAAM,CAAC;IAC1C;EACJ,CAAC,EAAE,EAAE,CAAC;EAENxD,SAAS,CAAC,MAAM;IACZ,IAAIiB,MAAM,EAAE;MACRwC,KAAK,CAAE,sCAAqCxC,MAAO,EAAC,CAAC,CAChDyC,IAAI,CAACC,QAAQ,IAAI;QACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBF,QAAQ,CAACG,MAAO,EAAC,CAAC;QAC7D;QACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;MAC1B,CAAC,CAAC,CACDL,IAAI,CAACM,IAAI,IAAI;QACV,MAAMC,GAAG,GAAG,EAAE;QACd,KAAK,IAAIC,CAAC,IAAIF,IAAI,EAAE;UAChB,IAAIG,CAAC,GAAG,CAAC,CAAC;UACVA,CAAC,CAACD,CAAC,CAAC,GAAGF,IAAI,CAACE,CAAC,CAAC;UACdD,GAAG,CAACG,IAAI,CAACD,CAAC,CAAC;QACf;QACApB,OAAO,CAACC,GAAG,CAACiB,GAAG,CAAC,CAAC,CAAC,CAACD,IAAI,CAAC;QACxB1C,cAAc,CAAC2C,GAAG,CAAC,CAAC,CAAC,CAACD,IAAI,CAAC;MAC/B,CAAC,CAAC,CACDK,KAAK,CAACC,KAAK,IAAIvB,OAAO,CAACuB,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC,CAAC;;MAEzE;MACAb,KAAK,CAAE,qCAAoCxC,MAAO,EAAC,CAAC,CAC/CyC,IAAI,CAACC,QAAQ,IAAI;QACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;QAC3E;QACA,OAAOF,QAAQ,CAACI,IAAI,CAAC,CAAC;MAC1B,CAAC,CAAC,CACDL,IAAI,CAACa,UAAU,IAAI;QAChB/B,SAAS,CAAC+B,UAAU,CAAC;QACrB,MAAMC,sBAAsB,GAAGD,UAAU,CAACE,IAAI,CAACC,KAAK,IAAIA,KAAK,CAACC,OAAO,IAAI/B,gBAAgB,CAAC;QAC1FG,OAAO,CAACC,GAAG,CAACwB,sBAAsB,CAAC;QACnC,IAAIA,sBAAsB,EAAE;UACxBpD,gBAAgB,CAACoD,sBAAsB,CAACG,OAAO,CAAC;QACpD;MACJ,CAAC,CAAC,CACDN,KAAK,CAACC,KAAK,IAAIvB,OAAO,CAACuB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC,CAAC;IAC5E;EACJ,CAAC,EAAE,CAACrD,MAAM,CAAC,CAAC;EAEZ,MAAM2D,YAAY,GAAG,MAAOC,KAAK,IAAK;IAClCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtBpC,YAAY,CAAC,IAAI,CAAC;IAClB,MAAMqC,QAAQ,GAAG,IAAIC,QAAQ,CAACH,KAAK,CAACI,MAAM,CAAC;IAC3C,IAAIC,QAAQ,GAAG,EAAE;IACjB,MAAMC,SAAS,GAAGJ,QAAQ,CAACK,GAAG,CAAC,YAAY,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IACrD,MAAMC,QAAQ,GAAGP,QAAQ,CAACK,GAAG,CAAC,WAAW,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IACnD,MAAMV,OAAO,GAAGI,QAAQ,CAACK,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC;;IAEzC;IACA,IAAI,CAACD,SAAS,EAAE;MACZzC,YAAY,CAAC,KAAK,CAAC;MACnB6C,KAAK,CAAC,sCAAsC,CAAC;MAC7C;IACJ;IAEA,IAAI,CAACD,QAAQ,EAAE;MACX5C,YAAY,CAAC,KAAK,CAAC;MACnB6C,KAAK,CAAC,4CAA4C,CAAC;MACnD;IACJ;IAEA,IAAI,CAACZ,OAAO,IAAIA,OAAO,KAAK,EAAE,EAAE;MAC5BjC,YAAY,CAAC,KAAK,CAAC;MACnB6C,KAAK,CAAC,wBAAwB,CAAC;MAC/B;IACJ;IACA,IAAIpD,aAAa,EAAE;MACf,IAAI;QACA,MAAMqD,YAAY,GAAG,MAAMjF,WAAW,CAAC4B,aAAa,EAAE4C,QAAQ,CAACK,GAAG,CAAC,YAAY,CAAC,CAAC;QACjFrC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEwC,YAAY,CAAC;QACzDN,QAAQ,GAAGM,YAAY,CAACC,GAAG;MAC/B,CAAC,CAAC,OAAOC,WAAW,EAAE;QAClB3C,OAAO,CAACuB,KAAK,CAAC,yBAAyB,EAAEoB,WAAW,CAAC;QACrD;MACJ;IACJ,CAAC,MAAI;MACDhD,YAAY,CAAC,KAAK,CAAC;MACnB6C,KAAK,CAAC,2BAA2B,CAAC;MAElC;IACJ;IAEA,MAAMI,QAAQ,GAAG;MACbC,UAAU,EAAEb,QAAQ,CAACK,GAAG,CAAC,YAAY,CAAC;MACtCS,SAAS,EAAEd,QAAQ,CAACK,GAAG,CAAC,WAAW,CAAC;MACpCU,cAAc,EAAEZ,QAAQ;MACxB1B,MAAM,EAAEvC,MAAM;MACdoB,QAAQ,EAAEA,QAAQ;MAClB0D,QAAQ,EAAE5E;IACd,CAAC;IAGD4B,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAE2C,QAAQ,CAAC,CAAC,CAAC;;IAE/ClC,KAAK,CAAC,gCAAgC,EAAE;MACpCuC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAE5C,IAAI,CAAC6C,SAAS,CAACR,QAAQ;IACjC,CAAC,CAAC,CACGjC,IAAI,CAACC,QAAQ,IAAI;MACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAClD;MACA,OAAOF,QAAQ,CAACyC,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACD1C,IAAI,CAACM,IAAI,IAAI;MACVjB,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEgB,IAAI,CAAC;MAC7BhC,QAAQ,CAAC,GAAG,CAAC;IACjB,CAAC,CAAC,CACDqC,KAAK,CAAEC,KAAK,IAAK;MACdvB,OAAO,CAACuB,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAClC,CAAC,CAAC,CACD+B,OAAO,CAAC,MAAM;MACX3D,YAAY,CAAC,KAAK,CAAC;IACvB,CAAC,CAAC;IAAC;EACX,CAAC;EAED,MAAM4D,gBAAgB,GAAIzB,KAAK,IAAK;IAChC,MAAM0B,SAAS,GAAG1B,KAAK,CAACI,MAAM,CAACuB,KAAK;IACpClF,cAAc,CAACmF,WAAW,IAAI;MAC1B,OAAO,CAAC,GAAGA,WAAW,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QACnC,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAACH,CAAC,CAACI,SAAS,CAAC;QACnC,MAAMC,KAAK,GAAG,IAAIF,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC;QACnC,OAAOR,SAAS,KAAK,KAAK,GAAGM,KAAK,GAAGG,KAAK,GAAGA,KAAK,GAAGH,KAAK;MAC9D,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EAED7G,SAAS,CAAC,MAAM;IACZ+C,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAElB,cAAc,CAAC;EAC1D,CAAC,EAAE,CAACA,cAAc,CAAC,CAAC;EACpB;EACA,IAAImF,kBAAkB,GAAG,EAAE;EAE3B,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;IACjCnE,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEzB,SAAS,EAAE,OAAO,EAAEI,SAAS,CAACwF,OAAO,CAAC;IAExE,IAAI,CAAC5F,SAAS,EAAE;MACZ6F,UAAU,CAAC,YAAY;QACnB,IAAIzF,SAAS,CAACwF,OAAO,EAAE;UACnB,IAAI;YACA,MAAME,MAAM,GAAG,MAAMhH,gBAAgB,CAAC4C,UAAU,EAAEtB,SAAS,CAACwF,OAAO,CAAC;YACpE1F,kBAAkB,CAAC0F,OAAO,GAAGE,MAAM,CAACC,eAAe;YACnD5F,iBAAiB,CAACyF,OAAO,GAAGE,MAAM,CAACE,cAAc;;YAEjD;YACA,MAAMC,MAAM,GAAG7F,SAAS,CAACwF,OAAO,CAACM,SAAS,CAAC,CAAC;YAC5C1E,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEwE,MAAM,CAAC;YAE7B,MAAME,QAAQ,GAAG,IAAIC,aAAa,CAACH,MAAM,CAAC;YAC1C3F,gBAAgB,CAAC6F,QAAQ,CAAC;YAE1BA,QAAQ,CAACE,eAAe,GAAI/C,KAAK,IAAK;cAClC,IAAIA,KAAK,CAACb,IAAI,CAAC6D,IAAI,GAAG,CAAC,EAAE;gBACrBZ,kBAAkB,CAAC7C,IAAI,CAACS,KAAK,CAACb,IAAI,CAAC;cACvC;YACJ,CAAC;YAED0D,QAAQ,CAACI,MAAM,GAAG,YAAY;cAC1B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACf,kBAAkB,EAAE;gBAAEgB,IAAI,EAAE;cAAa,CAAC,CAAC;cACjE7F,gBAAgB,CAAC2F,IAAI,CAAC,CAAC,CAAC;cACxBd,kBAAkB,GAAG,EAAE;YAC3B,CAAC;YAGDjG,aAAa,CAAC,IAAI,CAAC;YACnB0G,QAAQ,CAACQ,KAAK,CAAC,CAAC;UAEpB,CAAC,CAAC,OAAO5D,KAAK,EAAE;YACZvB,OAAO,CAACuB,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;UACvD;QACJ,CAAC,MAAM;UACHvB,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAErB,SAAS,CAACwF,OAAO,CAAC;QACvD;MACJ,CAAC,EAAE,GAAG,CAAC;IACX,CAAC,MAAM;MACH,IAAIvF,aAAa,EAAE;QACfA,aAAa,CAACuG,IAAI,CAAC,CAAC;MACxB;MACA7H,aAAa,CAACmB,kBAAkB,CAAC0F,OAAO,EAAEzF,iBAAiB,CAACyF,OAAO,CAAC;MACpE1F,kBAAkB,CAAC0F,OAAO,GAAG,IAAI;MACjCzF,iBAAiB,CAACyF,OAAO,GAAG,IAAI;MAChCnG,aAAa,CAAC,KAAK,CAAC;IACxB;IACAQ,YAAY,CAAC,CAACD,SAAS,CAAC;EAC5B,CAAC;EACD,MAAM6G,WAAW,GAAGA,CAAA,KAAM;IACtB;IACAC,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;;IAE7C;IACA,IAAIhH,SAAS,IAAIK,aAAa,IAAIA,aAAa,CAACiB,KAAK,KAAK,UAAU,EAAE;MAClEjB,aAAa,CAACuG,IAAI,CAAC,CAAC;IACxB;;IAEA;IACAnH,aAAa,CAAC,KAAK,CAAC;IACpBQ,YAAY,CAAC,KAAK,CAAC;IACnBU,qBAAqB,CAAC,KAAK,CAAC;IAC5BE,gBAAgB,CAAC,IAAI,CAAC;IACtBE,WAAW,CAAC,KAAK,CAAC;;IAElB;IACA,IAAIb,kBAAkB,CAAC0F,OAAO,IAAIzF,iBAAiB,CAACyF,OAAO,EAAE;MACzD7G,aAAa,CAACmB,kBAAkB,CAAC0F,OAAO,EAAEzF,iBAAiB,CAACyF,OAAO,CAAC;MACpE1F,kBAAkB,CAAC0F,OAAO,GAAG,IAAI;MACjCzF,iBAAiB,CAACyF,OAAO,GAAG,IAAI;IACpC;;IAEA;IACA,IAAIhF,aAAa,EAAE;MACfqG,GAAG,CAACC,eAAe,CAACtG,aAAa,CAAC;IACtC;EACJ,CAAC;EACD,SAASuG,iBAAiBA,CAAC7D,KAAK,EAAE;IAC9BzD,gBAAgB,CAACyD,KAAK,CAACI,MAAM,CAACuB,KAAK,CAAC;EACxC;EACA,MAAMmC,UAAU,GAAIC,UAAU,IAAK;IAC/B,MAAMC,IAAI,GAAG,IAAI/B,IAAI,CAAC8B,UAAU,CAAC;IACjC,OAAOC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC3C,CAAC;EACD,oBACItI,OAAA;IAAKuI,EAAE,EAAC,MAAM;IAAAC,QAAA,gBACVxI,OAAA;MAAKuI,EAAE,EAAC,MAAM;MAAAC,QAAA,eACVxI,OAAA;QAAAwI,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,eACN5I,OAAA;MAAK6I,SAAS,EAAC,gBAAgB;MAAAL,QAAA,gBAC3BxI,OAAA;QAAKuI,EAAE,EAAC,OAAO;QAAAC,QAAA,gBACXxI,OAAA;UAAM8I,QAAQ,EAAE3E,YAAa;UAACoE,EAAE,EAAC,UAAU;UAAAC,QAAA,gBACvCxI,OAAA;YAAKuI,EAAE,EAAC,MAAM;YAACM,SAAS,EAAC,MAAM;YAAAL,QAAA,gBAC3BxI,OAAA;cAAKuI,EAAE,EAAC,gBAAgB;cAAAC,QAAA,GACnB1H,SAAS,iBACNd,OAAA,CAAAE,SAAA;gBAAAsI,QAAA,eACIxI,OAAA;kBAAO+I,GAAG,EAAE7H,SAAU;kBAAC8H,KAAK,EAAE;oBAAEC,KAAK,EAAE;kBAAO,CAAE;kBAACC,QAAQ;kBAACC,WAAW;gBAAA;kBAAAV,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAE;cAAC,gBAE1E,CACL,EAGAlH,aAAa,gBACd1B,OAAA;gBAAAwI,QAAA,eACAxI,OAAA;kBAAOgJ,KAAK,EAAE;oBAAEC,KAAK,EAAE;kBAAO,CAAE;kBAACG,QAAQ;kBAAAZ,QAAA,eACzCxI,OAAA;oBAAQqJ,GAAG,EAAEtB,GAAG,CAACuB,eAAe,CAAC5H,aAAa,CAAE;oBAAC8F,IAAI,EAAC;kBAAY;oBAAAiB,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAE;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC7D;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACR,CAAC,gBAEF5I,OAAA;gBAAQuI,EAAE,EAAC,eAAe;gBAACf,IAAI,EAAC,QAAQ;gBAAC+B,OAAO,EAAE9C,gBAAiB;gBAAA+B,QAAA,EAAE1H,SAAS,GAAG,MAAM,GAAG;cAAiB;gBAAA2H,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAS,CACvH;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAGI,CAAC,eAEN5I,OAAA;cAAK6I,SAAS,EAAC,WAAW;cAACN,EAAE,EAAC,UAAU;cAAAC,QAAA,gBACpCxI,OAAA;gBAAAwI,QAAA,EAAQ;cAAmB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eACpC5I,OAAA;gBAAOwH,IAAI,EAAC,MAAM;gBAACe,EAAE,EAAC,OAAO;gBAACiB,WAAW,EAAC,YAAY;gBAACC,IAAI,EAAC;cAAY;gBAAAhB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC1E,CAAC,eAYN5I,OAAA;cAAK6I,SAAS,EAAC,WAAW;cAACN,EAAE,EAAC,UAAU;cAAAC,QAAA,gBACpCxI,OAAA;gBAAAwI,QAAA,EAAQ;cAAyB;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAC1C5I,OAAA;gBAAOwH,IAAI,EAAC,MAAM;gBAACe,EAAE,EAAC,aAAa;gBAACiB,WAAW,EAAC,qBAAqB;gBAACC,IAAI,EAAC;cAAW;gBAAAhB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACxF,CAAC,eACN5I,OAAA;cAAK6I,SAAS,EAAC,OAAO;cAAAL,QAAA,gBAClBxI,OAAA;gBAAAwI,QAAA,EAAQ;cAAc;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC,eAC/B5I,OAAA;gBAAQuI,EAAE,EAAC,OAAO;gBAACkB,IAAI,EAAC,SAAS;gBAAC1D,KAAK,EAAErF,aAAc;gBAACgJ,QAAQ,EAAEzB,iBAAkB;gBAAAO,QAAA,gBACpFxI,OAAA;kBAAQ+F,KAAK,EAAC,EAAE;kBAAAyC,QAAA,EAAG;gBAAc;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ,CAAC,EACrC9G,MAAM,CAAC6H,GAAG,CAAC1F,KAAK,iBACbjE,OAAA;kBAA8B+F,KAAK,EAAE9B,KAAK,CAACC,OAAQ;kBAAAsE,QAAA,EAAEvE,KAAK,CAAC2F;gBAAS,GAAvD3F,KAAK,CAAC2F,SAAS;kBAAAnB,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAiD,CAChF,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACE,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACR,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEL,CAAC,eACN5I,OAAA;YAAK6I,SAAS,EAAC,MAAM;YAAAL,QAAA,gBACbxI,OAAA;cAAAwI,QAAA,EAAQ;YAER;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACT5I,OAAA;cACIwH,IAAI,EAAC,UAAU;cACde,EAAE,EAAC,UAAU;cACbsB,OAAO,EAAEjI,QAAS;cAClB8H,QAAQ,EAAGI,CAAC,IAAKjI,WAAW,CAACiI,CAAC,CAACtF,MAAM,CAACqF,OAAO;YAAE;cAAApB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/C,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,eACN5I,OAAA;YAAQwH,IAAI,EAAC,QAAQ;YAACzB,KAAK,EAAC,QAAQ;YAAC0D,IAAI,EAAC,QAAQ;YAAClB,EAAE,EAAC,QAAQ;YAAAC,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC9E5I,OAAA;YAAQwH,IAAI,EAAC,QAAQ;YAAC+B,OAAO,EAAE5B,WAAY;YAACY,EAAE,EAAC,QAAQ;YAAAC,QAAA,EAAC;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAExE,CAAC,EACN5G,SAAS,iBAAIhC,OAAA;UAAAwI,QAAA,eAAKxI,OAAA;YAAAwI,QAAA,EAAI;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC,eACN5I,OAAA;QAAKuI,EAAE,EAAC,YAAY;QAAAC,QAAA,eAChBxI,OAAA;UAAOuI,EAAE,EAAC,cAAc;UAAAC,QAAA,gBACpBxI,OAAA;YAAAwI,QAAA,eACIxI,OAAA;cAAAwI,QAAA,gBACIxI,OAAA;gBAAAwI,QAAA,EAAI;cAAO;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAChB5I,OAAA;gBAAIuI,EAAE,EAAC,MAAM;gBAAAC,QAAA,eACTxI,OAAA;kBAAQuI,EAAE,EAAC,OAAO;kBAACkB,IAAI,EAAC,OAAO;kBAACC,QAAQ,EAAE7D,gBAAiB;kBAAA2C,QAAA,gBACvDxI,OAAA;oBAAQ+F,KAAK,EAAC,KAAK;oBAAAyC,QAAA,EAAC;kBAAU;oBAAAC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC,eACvC5I,OAAA;oBAAQ+F,KAAK,EAAC,KAAK;oBAAAyC,QAAA,EAAC;kBAAS;oBAAAC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAClC;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACT,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACL;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEF,CAAC,eACR5I,OAAA;YAAAwI,QAAA,EACK5H,WAAW,CAAC+I,GAAG,CAAC,CAACI,IAAI,EAAEC,KAAK,kBACzBhK,OAAA;cAAAwI,QAAA,gBACIxI,OAAA;gBAAIuI,EAAE,EAAC,KAAK;gBAAAC,QAAA,EACN,GAAEuB,IAAI,CAAC5E,UAAW;cAAC;gBAAAsD,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACrB,CAAC,eACL5I,OAAA;gBAAIuI,EAAE,EAAC,MAAM;gBAAAC,QAAA,EAAEN,UAAU,CAAC6B,IAAI,CAACzD,SAAS;cAAC;gBAAAmC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA,GAJ1CoB,KAAK;cAAAvB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAKV,CACP;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACxI,EAAA,CA9WQD,QAAQ;EAAA,QAWIT,WAAW,EAMXC,WAAW;AAAA;AAAAsK,EAAA,GAjBvB9J,QAAQ;AAgXjB,eAAeA,QAAQ;AAAC,IAAA8J,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}