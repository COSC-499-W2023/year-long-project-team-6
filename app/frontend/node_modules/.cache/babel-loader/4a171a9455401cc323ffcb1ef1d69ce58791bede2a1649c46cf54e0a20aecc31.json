{"ast":null,"code":"var _jsxFileName = \"/Users/xuximin/Desktop/499/year-long-project-team-6/app/frontend/src/pages/Post.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport \"../component/CSS/post.css\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { initializeWebRTC, cleanupWebRTC } from './webrtc';\nimport { uploadVideo } from './webrtc';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction PostPage() {\n  _s();\n  var _location$state;\n  const [showWebRTC, setShowWebRTC] = useState(false);\n  const [userId, setUserId] = useState(\"\");\n  const [selectedGroup, setSelectedGroup] = useState(\"\");\n  const [postHistory, setPostHistory] = useState([]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const signalingClientRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const localView = useRef(null);\n  const [mediaRecorder, setMediaRecorder] = useState(null);\n  const [recordedChunks, setRecordedChunks] = useState([]);\n  const navigate = useNavigate();\n  const [isRecordingStopped, setIsRecordingStopped] = useState(false);\n  const [recordedVideo, setRecordedVideo] = useState(null);\n  const [blurFace, setBlurFace] = useState(false);\n  const [groups, setGroups] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const groupIdFromState = (_location$state = location.state) === null || _location$state === void 0 ? void 0 : _location$state.groupId;\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const channelARN = 'arn:aws:kinesisvideo:us-east-1:466618866658:channel/webrtc-499/1701571372732';\n  useEffect(() => {\n    const sessionUser = sessionStorage.getItem('user');\n    console.log(\"Sessopm User: \" + sessionUser);\n    if (!sessionUser) {\n      navigate('/login');\n    } else {\n      const user = JSON.parse(sessionUser);\n      setUserId(user.userid);\n      console.log(\"User Id: \" + user.userid);\n    }\n  }, []);\n  useEffect(() => {\n    if (userId) {\n      fetch(`http://localhost:5001/post-history/${userId}`).then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      }).then(data => {\n        const arr = [];\n        for (let i in data) {\n          let o = {};\n          o[i] = data[i];\n          arr.push(o);\n        }\n        console.log(arr[0].data);\n        setPostHistory(arr[0].data);\n      }).catch(error => console.error('Error fetching post history:', error));\n\n      // Fetch groups\n      fetch(`http://localhost:5001/user-groups/${userId}`).then(response => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok for fetching user groups');\n        }\n        return response.json();\n      }).then(groupsData => {\n        setGroups(groupsData);\n        const selectedGroupFromState = groupsData.find(group => group.groupid == groupIdFromState);\n        console.log(selectedGroupFromState);\n        if (selectedGroupFromState) {\n          setSelectedGroup(selectedGroupFromState.groupid);\n        }\n      }).catch(error => console.error('Error fetching user groups:', error));\n    }\n  }, [userId]);\n  const handleSubmit = async event => {\n    event.preventDefault();\n    setIsLoading(true);\n    setIsSubmitting(true);\n    const formData = new FormData(event.target);\n    const postTitle = formData.get('post_title').trim();\n    const postText = formData.get('post_text').trim();\n    const groupid = formData.get('groupid');\n    if (!postTitle || !postText || !groupid || groupid === \"\") {\n      setIsLoading(false);\n      setIsSubmitting(false);\n      alert('Please ensure all fields are filled out correctly.');\n      return;\n    }\n    if (recordedVideo) {\n      try {\n        await uploadVideoWithProgress(recordedVideo, postTitle, progressEvent => {\n          const progress = progressEvent.loaded / progressEvent.total * 100;\n          setProgress(progress);\n        });\n        console.log('Video uploaded successfully');\n      } catch (uploadError) {\n        console.error('Failed to upload video:', uploadError);\n        setIsLoading(false);\n        setIsSubmitting(false);\n        alert('Failed to upload video.');\n        return;\n      }\n    } else {\n      setIsLoading(false);\n      setIsSubmitting(false);\n      alert('Please record your video.');\n      return;\n    }\n\n    // Assuming the rest of your form data handling and post submission logic goes here.\n  };\n\n  const uploadVideoWithProgress = (videoBlob, title, onProgress) => {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      const formData = new FormData();\n      formData.append('video', videoBlob, `${title}.webm`);\n      xhr.open('POST', 'http://localhost:5001/upload-video', true);\n      xhr.upload.onprogress = event => {\n        if (event.lengthComputable) {\n          onProgress(event);\n        }\n      };\n      xhr.onload = () => {\n        if (xhr.status === 200) {\n          resolve(JSON.parse(xhr.responseText));\n        } else {\n          reject('Upload failed with status: ' + xhr.status);\n        }\n      };\n      xhr.onerror = () => reject(xhr.statusText);\n      xhr.send(formData);\n    });\n  };\n  const handleSortChange = event => {\n    const sortOrder = event.target.value;\n    setPostHistory(prevHistory => {\n      return [...prevHistory].sort((a, b) => {\n        const dateA = new Date(a.post_date);\n        const dateB = new Date(b.post_date);\n        return sortOrder === 'Asc' ? dateA - dateB : dateB - dateA;\n      });\n    });\n  };\n  useEffect(() => {\n    console.log('recordedChunks updated:', recordedChunks);\n  }, [recordedChunks]);\n  // Temporary array to hold recorded chunks, outside of the function\n  let tempRecordedChunks = [];\n  const handleTogglePlay = async () => {\n    console.log('Click - isPlaying:', isPlaying, 'Refs:', localView.current);\n    if (!isPlaying) {\n      console.log(localView.current);\n      setTimeout(async () => {\n        if (localView.current) {\n          try {\n            const webrtc = await initializeWebRTC(channelARN, localView.current);\n            signalingClientRef.current = webrtc.signalingClient;\n            peerConnectionRef.current = webrtc.peerConnection;\n\n            // Initialize MediaRecorder here\n            const stream = localView.current.srcObject; // Assuming this is your local stream\n            console.log('stream', stream);\n            const recorder = new MediaRecorder(stream);\n            setMediaRecorder(recorder);\n            recorder.ondataavailable = event => {\n              if (event.data.size > 0) {\n                tempRecordedChunks.push(event.data);\n              }\n            };\n            recorder.onstop = async () => {\n              const blob = new Blob(tempRecordedChunks, {\n                type: 'video/webm'\n              });\n              setRecordedVideo(blob); // Assuming you have a state called recordedVideo\n              tempRecordedChunks = [];\n            };\n            setShowWebRTC(true);\n            recorder.start();\n          } catch (error) {\n            console.error('Error initializing WebRTC: ', error);\n          }\n        } else {\n          console.log('Refs are not set:', localView.current);\n        }\n      }, 100);\n    } else {\n      if (mediaRecorder) {\n        mediaRecorder.stop();\n      }\n      cleanupWebRTC(signalingClientRef.current, peerConnectionRef.current);\n      signalingClientRef.current = null;\n      peerConnectionRef.current = null;\n      setShowWebRTC(false);\n    }\n    setIsPlaying(!isPlaying);\n  };\n  const handleClear = () => {\n    // Reset form fields\n    document.getElementById(\"postform\").reset(); // Replace \"yourFormId\" with the actual ID of your form\n\n    // Stop recording if it's in progress\n    if (isPlaying && mediaRecorder && mediaRecorder.state !== \"inactive\") {\n      mediaRecorder.stop();\n    }\n\n    // Reset all relevant states to their initial values\n    setShowWebRTC(false);\n    setIsPlaying(false);\n    setIsRecordingStopped(false);\n    setRecordedVideo(null);\n    setBlurFace(false);\n\n    // Cleanup WebRTC if needed\n    if (signalingClientRef.current || peerConnectionRef.current) {\n      cleanupWebRTC(signalingClientRef.current, peerConnectionRef.current);\n      signalingClientRef.current = null;\n      peerConnectionRef.current = null;\n    }\n\n    // Clear recorded video URL to avoid memory leaks\n    if (recordedVideo) {\n      URL.revokeObjectURL(recordedVideo);\n    }\n  };\n  function handleGroupChange(event) {\n    setSelectedGroup(event.target.value);\n  }\n  const formatDate = dateString => {\n    const date = new Date(dateString);\n    return date.toISOString().split('T')[0];\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"send\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Send Your Post \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"input\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          id: \"postform\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"main\",\n            className: \"main\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"videoContainer\",\n              children: [isPlaying && /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: /*#__PURE__*/_jsxDEV(\"video\", {\n                  ref: localView,\n                  style: {\n                    width: '640px'\n                  },\n                  autoPlay: true,\n                  playsInline: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false), recordedVideo ? /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"video\", {\n                  style: {\n                    width: '640px'\n                  },\n                  controls: true,\n                  children: /*#__PURE__*/_jsxDEV(\"source\", {\n                    src: URL.createObjectURL(recordedVideo),\n                    type: \"video/webm\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 281,\n                    columnNumber: 33\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 280,\n                  columnNumber: 33\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 33\n              }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n                id: \"record_button\",\n                type: \"button\",\n                onClick: handleTogglePlay,\n                children: isPlaying ? 'Stop' : 'Start Recording'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"EnterText\",\n              id: \"text_one\",\n              children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n                children: \"Name your new video\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 292,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"VName\",\n                placeholder: \"Video Name\",\n                name: \"post_title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"EnterText\",\n              id: \"text_two\",\n              children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n                children: \"Description of Your Video\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 307,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"Description\",\n                placeholder: \"Describe your video\",\n                name: \"post_text\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"group\",\n              children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n                children: \"Choose a Group\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 311,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                id: \"GName\",\n                name: \"groupid\",\n                value: selectedGroup,\n                onChange: handleGroupChange,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"Choose a group\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 33\n                }, this), groups.map(group => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: group.groupid,\n                  children: group.groupname\n                }, group.groupname, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 315,\n                  columnNumber: 41\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"blur\",\n            children: [/*#__PURE__*/_jsxDEV(\"legend\", {\n              children: \"BlurFace\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              id: \"blurFace\",\n              checked: blurFace,\n              onChange: e => setBlurFace(e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 325,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            value: \"Submit\",\n            name: \"submit\",\n            id: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: handleClear,\n            id: \"submit\",\n            children: \"Clear\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 21\n        }, this), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Submitting...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 40\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 35\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"HistroyBar\",\n        children: /*#__PURE__*/_jsxDEV(\"table\", {\n          id: \"histroyTable\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: \"History\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 342,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                id: \"Sort\",\n                children: /*#__PURE__*/_jsxDEV(\"select\", {\n                  id: \"order\",\n                  name: \"order\",\n                  onChange: handleSortChange,\n                  children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"Des\",\n                    children: \"Descending\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 345,\n                    columnNumber: 41\n                  }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: \"Asc\",\n                    children: \"Ascending\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 346,\n                    columnNumber: 41\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: postHistory.map((post, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                id: \"img\",\n                children: `${post.post_title}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                id: \"date\",\n                children: formatDate(post.post_date)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 37\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 261,\n    columnNumber: 9\n  }, this);\n}\n_s(PostPage, \"WVht3SxacvxsljEjmPKk0sZjvN4=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = PostPage;\nexport default PostPage;\nvar _c;\n$RefreshReg$(_c, \"PostPage\");","map":{"version":3,"names":["React","useEffect","useState","useRef","useNavigate","useLocation","initializeWebRTC","cleanupWebRTC","uploadVideo","jsxDEV","_jsxDEV","Fragment","_Fragment","PostPage","_s","_location$state","showWebRTC","setShowWebRTC","userId","setUserId","selectedGroup","setSelectedGroup","postHistory","setPostHistory","isPlaying","setIsPlaying","signalingClientRef","peerConnectionRef","localView","mediaRecorder","setMediaRecorder","recordedChunks","setRecordedChunks","navigate","isRecordingStopped","setIsRecordingStopped","recordedVideo","setRecordedVideo","blurFace","setBlurFace","groups","setGroups","isLoading","setIsLoading","location","groupIdFromState","state","groupId","isSubmitting","setIsSubmitting","progress","setProgress","channelARN","sessionUser","sessionStorage","getItem","console","log","user","JSON","parse","userid","fetch","then","response","ok","Error","status","json","data","arr","i","o","push","catch","error","groupsData","selectedGroupFromState","find","group","groupid","handleSubmit","event","preventDefault","formData","FormData","target","postTitle","get","trim","postText","alert","uploadVideoWithProgress","progressEvent","loaded","total","uploadError","videoBlob","title","onProgress","Promise","resolve","reject","xhr","XMLHttpRequest","append","open","upload","onprogress","lengthComputable","onload","responseText","onerror","statusText","send","handleSortChange","sortOrder","value","prevHistory","sort","a","b","dateA","Date","post_date","dateB","tempRecordedChunks","handleTogglePlay","current","setTimeout","webrtc","signalingClient","peerConnection","stream","srcObject","recorder","MediaRecorder","ondataavailable","size","onstop","blob","Blob","type","start","stop","handleClear","document","getElementById","reset","URL","revokeObjectURL","handleGroupChange","formatDate","dateString","date","toISOString","split","id","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","ref","style","width","autoPlay","playsInline","controls","src","createObjectURL","onClick","placeholder","name","onChange","map","groupname","checked","e","post","index","post_title","_c","$RefreshReg$"],"sources":["/Users/xuximin/Desktop/499/year-long-project-team-6/app/frontend/src/pages/Post.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport \"../component/CSS/post.css\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { initializeWebRTC, cleanupWebRTC } from './webrtc';\nimport { uploadVideo } from './webrtc';\n\nfunction PostPage() {\n    const [showWebRTC, setShowWebRTC] = useState(false);\n    const [userId, setUserId] = useState(\"\");\n    const [selectedGroup, setSelectedGroup] = useState(\"\");\n    const [postHistory, setPostHistory] = useState([]);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const signalingClientRef = useRef(null);\n    const peerConnectionRef = useRef(null);\n    const localView = useRef(null);\n    const [mediaRecorder, setMediaRecorder] = useState(null);\n    const [recordedChunks, setRecordedChunks] = useState([]);\n    const navigate = useNavigate();\n    const [isRecordingStopped, setIsRecordingStopped] = useState(false);\n    const [recordedVideo, setRecordedVideo] = useState(null);\n    const [blurFace, setBlurFace] = useState(false);\n    const [groups, setGroups] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const location = useLocation();\n    const groupIdFromState = location.state?.groupId;\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [progress, setProgress] = useState(0);\n\n\n    const channelARN = 'arn:aws:kinesisvideo:us-east-1:466618866658:channel/webrtc-499/1701571372732';\n    useEffect(() => {\n        const sessionUser = sessionStorage.getItem('user');\n        console.log(\"Sessopm User: \" + sessionUser);\n        if (!sessionUser) {\n            navigate('/login');\n        } else {\n            const user = JSON.parse(sessionUser);\n            setUserId(user.userid);\n            console.log(\"User Id: \" + user.userid);\n        }\n    }, []);\n\n    useEffect(() => {\n        if (userId) {\n            fetch(`http://localhost:5001/post-history/${userId}`)\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error(`HTTP error! status: ${response.status}`);\n                    }\n                    return response.json();\n                })\n                .then(data => {\n                    const arr = [];\n                    for (let i in data) {\n                        let o = {};\n                        o[i] = data[i];\n                        arr.push(o);\n                    }\n                    console.log(arr[0].data);\n                    setPostHistory(arr[0].data);\n                })\n                .catch(error => console.error('Error fetching post history:', error));\n\n            // Fetch groups\n            fetch(`http://localhost:5001/user-groups/${userId}`)\n                .then(response => {\n                    if (!response.ok) {\n                        throw new Error('Network response was not ok for fetching user groups');\n                    }\n                    return response.json();\n                })\n                .then(groupsData => {\n                    setGroups(groupsData);\n                    const selectedGroupFromState = groupsData.find(group => group.groupid == groupIdFromState);\n                    console.log(selectedGroupFromState);\n                    if (selectedGroupFromState) {\n                        setSelectedGroup(selectedGroupFromState.groupid);\n                    }\n                })\n                .catch(error => console.error('Error fetching user groups:', error));\n        }\n    }, [userId]);\n\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        setIsLoading(true);\n        setIsSubmitting(true);\n\n        const formData = new FormData(event.target);\n        const postTitle = formData.get('post_title').trim();\n        const postText = formData.get('post_text').trim();\n        const groupid = formData.get('groupid');\n\n        if (!postTitle || !postText || !groupid || groupid === \"\") {\n            setIsLoading(false);\n            setIsSubmitting(false);\n            alert('Please ensure all fields are filled out correctly.');\n            return;\n        }\n\n        if (recordedVideo) {\n            try {\n                await uploadVideoWithProgress(recordedVideo, postTitle, (progressEvent) => {\n                    const progress = (progressEvent.loaded / progressEvent.total) * 100;\n                    setProgress(progress);\n                });\n                console.log('Video uploaded successfully');\n            } catch (uploadError) {\n                console.error('Failed to upload video:', uploadError);\n                setIsLoading(false);\n                setIsSubmitting(false);\n                alert('Failed to upload video.');\n                return;\n            }\n        } else {\n            setIsLoading(false);\n            setIsSubmitting(false);\n            alert('Please record your video.');\n            return;\n        }\n\n        // Assuming the rest of your form data handling and post submission logic goes here.\n    };\n    const uploadVideoWithProgress = (videoBlob, title, onProgress) => {\n        return new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            const formData = new FormData();\n            formData.append('video', videoBlob, `${title}.webm`);\n\n            xhr.open('POST', 'http://localhost:5001/upload-video', true);\n\n            xhr.upload.onprogress = (event) => {\n                if (event.lengthComputable) {\n                    onProgress(event);\n                }\n            };\n\n            xhr.onload = () => {\n                if (xhr.status === 200) {\n                    resolve(JSON.parse(xhr.responseText));\n                } else {\n                    reject('Upload failed with status: ' + xhr.status);\n                }\n            };\n\n            xhr.onerror = () => reject(xhr.statusText);\n\n            xhr.send(formData);\n        });\n    };\n\n    const handleSortChange = (event) => {\n        const sortOrder = event.target.value;\n        setPostHistory(prevHistory => {\n            return [...prevHistory].sort((a, b) => {\n                const dateA = new Date(a.post_date);\n                const dateB = new Date(b.post_date);\n                return sortOrder === 'Asc' ? dateA - dateB : dateB - dateA;\n            });\n        });\n    };\n\n    useEffect(() => {\n        console.log('recordedChunks updated:', recordedChunks);\n    }, [recordedChunks]);\n    // Temporary array to hold recorded chunks, outside of the function\n    let tempRecordedChunks = [];\n\n    const handleTogglePlay = async () => {\n        console.log('Click - isPlaying:', isPlaying, 'Refs:', localView.current);\n\n        if (!isPlaying) {\n            console.log(localView.current);\n            \n            \n            setTimeout(async () => {\n                if (localView.current) {\n                    try {\n                        const webrtc = await initializeWebRTC(channelARN, localView.current);\n                        signalingClientRef.current = webrtc.signalingClient;\n                        peerConnectionRef.current = webrtc.peerConnection;\n\n                        // Initialize MediaRecorder here\n                        const stream = localView.current.srcObject; // Assuming this is your local stream\n                        console.log('stream', stream);\n\n                        const recorder = new MediaRecorder(stream);\n                        setMediaRecorder(recorder);\n\n                        recorder.ondataavailable = (event) => {\n                            if (event.data.size > 0) {\n                                tempRecordedChunks.push(event.data);\n                            }\n                        };\n\n                        recorder.onstop = async () => {\n                            const blob = new Blob(tempRecordedChunks, { type: 'video/webm' });\n                            setRecordedVideo(blob); // Assuming you have a state called recordedVideo\n                            tempRecordedChunks = [];\n                        };\n\n\n                        setShowWebRTC(true);\n                        recorder.start();\n\n                    } catch (error) {\n                        console.error('Error initializing WebRTC: ', error);\n                    }\n                } else {\n                    console.log('Refs are not set:', localView.current);\n                }\n            }, 100);\n        } else {\n            if (mediaRecorder) {\n                mediaRecorder.stop();\n            }\n            cleanupWebRTC(signalingClientRef.current, peerConnectionRef.current);\n            signalingClientRef.current = null;\n            peerConnectionRef.current = null;\n            setShowWebRTC(false);\n            \n        }\n        setIsPlaying(!isPlaying);\n    };\n    const handleClear = () => {\n        // Reset form fields\n        document.getElementById(\"postform\").reset(); // Replace \"yourFormId\" with the actual ID of your form\n    \n        // Stop recording if it's in progress\n        if (isPlaying && mediaRecorder && mediaRecorder.state !== \"inactive\") {\n            mediaRecorder.stop();\n        }\n    \n        // Reset all relevant states to their initial values\n        setShowWebRTC(false);\n        setIsPlaying(false);\n        setIsRecordingStopped(false);\n        setRecordedVideo(null);\n        setBlurFace(false);\n    \n        // Cleanup WebRTC if needed\n        if (signalingClientRef.current || peerConnectionRef.current) {\n            cleanupWebRTC(signalingClientRef.current, peerConnectionRef.current);\n            signalingClientRef.current = null;\n            peerConnectionRef.current = null;\n        }\n    \n        // Clear recorded video URL to avoid memory leaks\n        if (recordedVideo) {\n            URL.revokeObjectURL(recordedVideo);\n        }\n    };\n    function handleGroupChange(event) {\n        setSelectedGroup(event.target.value);\n    }\n    const formatDate = (dateString) => {\n        const date = new Date(dateString);\n        return date.toISOString().split('T')[0];\n    };\n    return (\n        <div id='page'>\n            <div id=\"send\">\n                <h2>Send Your Post </h2>\n            </div>\n            <div className=\"flex-container\">\n                <div id=\"input\">\n                    <form onSubmit={handleSubmit} id=\"postform\">\n                        <div id=\"main\" className=\"main\">\n                            <div id=\"videoContainer\">\n                                {isPlaying && (\n                                    <>\n                                        <video ref={localView} style={{ width: '640px'}} autoPlay playsInline />\n\n                                    </>\n                                )}\n                               \n\n                                {recordedVideo ? (\n                                <div>\n                                <video style={{ width: '640px'}} controls>\n                                <source src={URL.createObjectURL(recordedVideo)} type=\"video/webm\" />\n                                 </video>\n                            </div>\n                            ) : (\n                                <button id=\"record_button\" type='button' onClick={handleTogglePlay}>{isPlaying ? 'Stop' : 'Start Recording'}</button>\n                            )}\n\n\n                            </div>\n\n                            <div className=\"EnterText\" id=\"text_one\">\n                                <legend>Name your new video</legend>\n                                <input type=\"text\" id=\"VName\" placeholder=\"Video Name\" name=\"post_title\" />\n                            </div>\n                            {/*\n                            <div className=\"EnterText\">\n                                <legend>Choose a Group</legend>\n                                <select id=\"GName\" name=\"GName\" value={selectedGroup} onChange={handleGroupChange}>\n                                    <option value=\"\"></option>\n                                    <option value=\"Sender\">Sender</option>\n                                    <option value=\"Doctor\">Doctor</option>\n                                    <option value=\"Professor\">Professor</option>\n                                </select>\n                            </div>\n                        */}\n                            <div className=\"EnterText\" id=\"text_two\">\n                                <legend>Description of Your Video</legend>\n                                <input type=\"text\" id=\"Description\" placeholder=\"Describe your video\" name=\"post_text\" />\n                            </div>\n                            <div className=\"group\">\n                                <legend>Choose a Group</legend>\n                                <select id=\"GName\" name=\"groupid\" value={selectedGroup} onChange={handleGroupChange}>\n                                <option value=\"\"  >Choose a group</option>\n                                    {groups.map(group => (\n                                        <option key={group.groupname} value={group.groupid}>{group.groupname}</option>\n                                    ))}\n                                </select>\n                            </div>\n\n                        </div>\n                        <div className=\"blur\">\n                                <legend>\n                                    BlurFace  \n                                </legend>   \n                                <input\n                                    type=\"checkbox\"\n                                     id=\"blurFace\"\n                                     checked={blurFace}\n                                     onChange={(e) => setBlurFace(e.target.checked)}\n                                    />\n                            </div>\n                            <button type=\"submit\" value=\"Submit\" name=\"submit\" id=\"submit\">Submit</button>\n                            <button type=\"button\" onClick={handleClear} id=\"submit\">Clear</button>\n\n                    </form>\n                    {isLoading && <div><h3>Submitting...</h3></div>}\n                </div>\n                <div id=\"HistroyBar\">\n                    <table id=\"histroyTable\">\n                        <thead>\n                            <tr>\n                                <td>History</td>\n                                <td id=\"Sort\">\n                                    <select id=\"order\" name=\"order\" onChange={handleSortChange}>\n                                        <option value=\"Des\">Descending</option>\n                                        <option value=\"Asc\">Ascending</option>\n                                    </select>\n                                </td>\n                            </tr>\n\n                        </thead>\n                        <tbody>\n                            {postHistory.map((post, index) => (\n                                <tr key={index}>\n                                    <td id=\"img\">\n                                        {`${post.post_title}`}\n                                    </td>\n                                    <td id=\"date\">{formatDate(post.post_date)}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default PostPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}