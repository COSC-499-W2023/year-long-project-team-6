{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ROG\\\\Desktop\\\\COSC499\\\\year-long-project-team-6\\\\app\\\\frontend\\\\src\\\\pages\\\\allGroupPost.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GroupPostsPage() {\n  _s();\n  const {\n    groupId\n  } = useParams();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    // Fetch all posts for the group\n    fetch(`http://localhost:5001/all-group-post/${groupId}`).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      setPosts(data);\n    }).catch(error => {\n      console.error('Error fetching group posts:', error);\n    });\n  }, [groupId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Group Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), posts.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: post.post_title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: post.post_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 29\n        }, this)]\n      }, post.post_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 25\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No posts found for this group.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n}\n_s(GroupPostsPage, \"zwnrx3HVyXo/a0OOxv1dbUMYBls=\", false, function () {\n  return [useParams];\n});\n_c = GroupPostsPage;\nexport default GroupPostsPage;\nvar _c;\n$RefreshReg$(_c, \"GroupPostsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","GroupPostsPage","_s","groupId","posts","setPosts","fetch","then","response","ok","Error","status","json","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","post","post_title","post_text","post_id","_c","$RefreshReg$"],"sources":["C:/Users/ROG/Desktop/COSC499/year-long-project-team-6/app/frontend/src/pages/allGroupPost.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nfunction GroupPostsPage() {\r\n    const { groupId } = useParams();\r\n    const [posts, setPosts] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // Fetch all posts for the group\r\n        fetch(`http://localhost:5001/all-group-post/${groupId}`)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then(data => {\r\n                setPosts(data);\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching group posts:', error);\r\n            });\r\n    }, [groupId]);\r\n\r\n    return (\r\n        <div>\r\n            <h2>Group Posts</h2>\r\n            {posts.length > 0 ? (\r\n                <ul>\r\n                    {posts.map((post) => (\r\n                        <li key={post.post_id}>\r\n                            <h3>{post.post_title}</h3>\r\n                            <p>{post.post_text}</p>\r\n                            {/* More post details can be added here */}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            ) : (\r\n                <p>No posts found for this group.</p>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GroupPostsPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM;IAAEC;EAAQ,CAAC,GAAGL,SAAS,CAAC,CAAC;EAC/B,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACZ;IACAS,KAAK,CAAE,wCAAuCH,OAAQ,EAAC,CAAC,CACnDI,IAAI,CAACC,QAAQ,IAAI;MACd,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd,MAAM,IAAIC,KAAK,CAAE,uBAAsBF,QAAQ,CAACG,MAAO,EAAC,CAAC;MAC7D;MACA,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC1B,CAAC,CAAC,CACDL,IAAI,CAACM,IAAI,IAAI;MACVR,QAAQ,CAACQ,IAAI,CAAC;IAClB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAI;MACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACvD,CAAC,CAAC;EACV,CAAC,EAAE,CAACZ,OAAO,CAAC,CAAC;EAEb,oBACIH,OAAA;IAAAiB,QAAA,gBACIjB,OAAA;MAAAiB,QAAA,EAAI;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACnBjB,KAAK,CAACkB,MAAM,GAAG,CAAC,gBACbtB,OAAA;MAAAiB,QAAA,EACKb,KAAK,CAACmB,GAAG,CAAEC,IAAI,iBACZxB,OAAA;QAAAiB,QAAA,gBACIjB,OAAA;UAAAiB,QAAA,EAAKO,IAAI,CAACC;QAAU;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAC1BrB,OAAA;UAAAiB,QAAA,EAAIO,IAAI,CAACE;QAAS;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAFlBG,IAAI,CAACG,OAAO;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIjB,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC,gBAELrB,OAAA;MAAAiB,QAAA,EAAG;IAA8B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACvC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACnB,EAAA,CAvCQD,cAAc;EAAA,QACCH,SAAS;AAAA;AAAA8B,EAAA,GADxB3B,cAAc;AAyCvB,eAAeA,cAAc;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}