import { ExceptionOptionType as __ExceptionOptionType } from "@smithy/smithy-client";
import { KinesisVideoServiceException as __BaseException } from "./KinesisVideoServiceException";
export declare class AccessDeniedException extends __BaseException {
  readonly name: "AccessDeniedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<AccessDeniedException, __BaseException>
  );
}
export declare class AccountChannelLimitExceededException extends __BaseException {
  readonly name: "AccountChannelLimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      AccountChannelLimitExceededException,
      __BaseException
    >
  );
}
export declare class AccountStreamLimitExceededException extends __BaseException {
  readonly name: "AccountStreamLimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      AccountStreamLimitExceededException,
      __BaseException
    >
  );
}
export declare const APIName: {
  readonly GET_CLIP: "GET_CLIP";
  readonly GET_DASH_STREAMING_SESSION_URL: "GET_DASH_STREAMING_SESSION_URL";
  readonly GET_HLS_STREAMING_SESSION_URL: "GET_HLS_STREAMING_SESSION_URL";
  readonly GET_IMAGES: "GET_IMAGES";
  readonly GET_MEDIA: "GET_MEDIA";
  readonly GET_MEDIA_FOR_FRAGMENT_LIST: "GET_MEDIA_FOR_FRAGMENT_LIST";
  readonly LIST_FRAGMENTS: "LIST_FRAGMENTS";
  readonly PUT_MEDIA: "PUT_MEDIA";
};
export type APIName = (typeof APIName)[keyof typeof APIName];
export declare const Status: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETING: "DELETING";
  readonly UPDATING: "UPDATING";
};
export type Status = (typeof Status)[keyof typeof Status];
export declare const ChannelType: {
  readonly FULL_MESH: "FULL_MESH";
  readonly SINGLE_MASTER: "SINGLE_MASTER";
};
export type ChannelType = (typeof ChannelType)[keyof typeof ChannelType];
export interface SingleMasterConfiguration {
  MessageTtlSeconds?: number;
}
export interface ChannelInfo {
  ChannelName?: string;
  ChannelARN?: string;
  ChannelType?: ChannelType;
  ChannelStatus?: Status;
  CreationTime?: Date;
  SingleMasterConfiguration?: SingleMasterConfiguration;
  Version?: string;
}
export declare const ComparisonOperator: {
  readonly BEGINS_WITH: "BEGINS_WITH";
};
export type ComparisonOperator =
  (typeof ComparisonOperator)[keyof typeof ComparisonOperator];
export interface ChannelNameCondition {
  ComparisonOperator?: ComparisonOperator;
  ComparisonValue?: string;
}
export declare const ChannelProtocol: {
  readonly HTTPS: "HTTPS";
  readonly WEBRTC: "WEBRTC";
  readonly WSS: "WSS";
};
export type ChannelProtocol =
  (typeof ChannelProtocol)[keyof typeof ChannelProtocol];
export declare const ChannelRole: {
  readonly MASTER: "MASTER";
  readonly VIEWER: "VIEWER";
};
export type ChannelRole = (typeof ChannelRole)[keyof typeof ChannelRole];
export declare class ClientLimitExceededException extends __BaseException {
  readonly name: "ClientLimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ClientLimitExceededException, __BaseException>
  );
}
export declare const ConfigurationStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type ConfigurationStatus =
  (typeof ConfigurationStatus)[keyof typeof ConfigurationStatus];
export interface Tag {
  Key: string | undefined;
  Value: string | undefined;
}
export interface CreateSignalingChannelInput {
  ChannelName: string | undefined;
  ChannelType?: ChannelType;
  SingleMasterConfiguration?: SingleMasterConfiguration;
  Tags?: Tag[];
}
export interface CreateSignalingChannelOutput {
  ChannelARN?: string;
}
export declare class InvalidArgumentException extends __BaseException {
  readonly name: "InvalidArgumentException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidArgumentException, __BaseException>
  );
}
export declare class ResourceInUseException extends __BaseException {
  readonly name: "ResourceInUseException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceInUseException, __BaseException>
  );
}
export declare class TagsPerResourceExceededLimitException extends __BaseException {
  readonly name: "TagsPerResourceExceededLimitException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      TagsPerResourceExceededLimitException,
      __BaseException
    >
  );
}
export interface CreateStreamInput {
  DeviceName?: string;
  StreamName: string | undefined;
  MediaType?: string;
  KmsKeyId?: string;
  DataRetentionInHours?: number;
  Tags?: Record<string, string>;
}
export interface CreateStreamOutput {
  StreamARN?: string;
}
export declare class DeviceStreamLimitExceededException extends __BaseException {
  readonly name: "DeviceStreamLimitExceededException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      DeviceStreamLimitExceededException,
      __BaseException
    >
  );
}
export declare class InvalidDeviceException extends __BaseException {
  readonly name: "InvalidDeviceException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidDeviceException, __BaseException>
  );
}
export interface DeleteEdgeConfigurationInput {
  StreamName?: string;
  StreamARN?: string;
}
export interface DeleteEdgeConfigurationOutput {}
export declare class ResourceNotFoundException extends __BaseException {
  readonly name: "ResourceNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>
  );
}
export declare class StreamEdgeConfigurationNotFoundException extends __BaseException {
  readonly name: "StreamEdgeConfigurationNotFoundException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<
      StreamEdgeConfigurationNotFoundException,
      __BaseException
    >
  );
}
export interface DeleteSignalingChannelInput {
  ChannelARN: string | undefined;
  CurrentVersion?: string;
}
export interface DeleteSignalingChannelOutput {}
export declare class VersionMismatchException extends __BaseException {
  readonly name: "VersionMismatchException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<VersionMismatchException, __BaseException>
  );
}
export interface DeleteStreamInput {
  StreamARN: string | undefined;
  CurrentVersion?: string;
}
export interface DeleteStreamOutput {}
export declare class NotAuthorizedException extends __BaseException {
  readonly name: "NotAuthorizedException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<NotAuthorizedException, __BaseException>
  );
}
export declare const StrategyOnFullSize: {
  readonly DELETE_OLDEST_MEDIA: "DELETE_OLDEST_MEDIA";
  readonly DENY_NEW_MEDIA: "DENY_NEW_MEDIA";
};
export type StrategyOnFullSize =
  (typeof StrategyOnFullSize)[keyof typeof StrategyOnFullSize];
export interface LocalSizeConfig {
  MaxLocalMediaSizeInMB?: number;
  StrategyOnFullSize?: StrategyOnFullSize;
}
export interface DeletionConfig {
  EdgeRetentionInHours?: number;
  LocalSizeConfig?: LocalSizeConfig;
  DeleteAfterUpload?: boolean;
}
export interface DescribeEdgeConfigurationInput {
  StreamName?: string;
  StreamARN?: string;
}
export declare const RecorderStatus: {
  readonly SUCCESS: "SUCCESS";
  readonly SYSTEM_ERROR: "SYSTEM_ERROR";
  readonly USER_ERROR: "USER_ERROR";
};
export type RecorderStatus =
  (typeof RecorderStatus)[keyof typeof RecorderStatus];
export interface LastRecorderStatus {
  JobStatusDetails?: string;
  LastCollectedTime?: Date;
  LastUpdatedTime?: Date;
  RecorderStatus?: RecorderStatus;
}
export declare const UploaderStatus: {
  readonly SUCCESS: "SUCCESS";
  readonly SYSTEM_ERROR: "SYSTEM_ERROR";
  readonly USER_ERROR: "USER_ERROR";
};
export type UploaderStatus =
  (typeof UploaderStatus)[keyof typeof UploaderStatus];
export interface LastUploaderStatus {
  JobStatusDetails?: string;
  LastCollectedTime?: Date;
  LastUpdatedTime?: Date;
  UploaderStatus?: UploaderStatus;
}
export interface EdgeAgentStatus {
  LastRecorderStatus?: LastRecorderStatus;
  LastUploaderStatus?: LastUploaderStatus;
}
export declare const MediaUriType: {
  readonly FILE_URI: "FILE_URI";
  readonly RTSP_URI: "RTSP_URI";
};
export type MediaUriType = (typeof MediaUriType)[keyof typeof MediaUriType];
export interface MediaSourceConfig {
  MediaUriSecretArn: string | undefined;
  MediaUriType: MediaUriType | undefined;
}
export interface ScheduleConfig {
  ScheduleExpression: string | undefined;
  DurationInSeconds: number | undefined;
}
export interface RecorderConfig {
  MediaSourceConfig: MediaSourceConfig | undefined;
  ScheduleConfig?: ScheduleConfig;
}
export interface UploaderConfig {
  ScheduleConfig: ScheduleConfig | undefined;
}
export interface EdgeConfig {
  HubDeviceArn: string | undefined;
  RecorderConfig: RecorderConfig | undefined;
  UploaderConfig?: UploaderConfig;
  DeletionConfig?: DeletionConfig;
}
export declare const SyncStatus: {
  readonly ACKNOWLEDGED: "ACKNOWLEDGED";
  readonly DELETE_FAILED: "DELETE_FAILED";
  readonly DELETING: "DELETING";
  readonly DELETING_ACKNOWLEDGED: "DELETING_ACKNOWLEDGED";
  readonly IN_SYNC: "IN_SYNC";
  readonly SYNCING: "SYNCING";
  readonly SYNC_FAILED: "SYNC_FAILED";
};
export type SyncStatus = (typeof SyncStatus)[keyof typeof SyncStatus];
export interface DescribeEdgeConfigurationOutput {
  StreamName?: string;
  StreamARN?: string;
  CreationTime?: Date;
  LastUpdatedTime?: Date;
  SyncStatus?: SyncStatus;
  FailedStatusDetails?: string;
  EdgeConfig?: EdgeConfig;
  EdgeAgentStatus?: EdgeAgentStatus;
}
export interface DescribeImageGenerationConfigurationInput {
  StreamName?: string;
  StreamARN?: string;
}
export interface ImageGenerationDestinationConfig {
  Uri: string | undefined;
  DestinationRegion: string | undefined;
}
export declare const Format: {
  readonly JPEG: "JPEG";
  readonly PNG: "PNG";
};
export type Format = (typeof Format)[keyof typeof Format];
export declare const FormatConfigKey: {
  readonly JPEGQuality: "JPEGQuality";
};
export type FormatConfigKey =
  (typeof FormatConfigKey)[keyof typeof FormatConfigKey];
export declare const ImageSelectorType: {
  readonly PRODUCER_TIMESTAMP: "PRODUCER_TIMESTAMP";
  readonly SERVER_TIMESTAMP: "SERVER_TIMESTAMP";
};
export type ImageSelectorType =
  (typeof ImageSelectorType)[keyof typeof ImageSelectorType];
export interface ImageGenerationConfiguration {
  Status: ConfigurationStatus | undefined;
  ImageSelectorType: ImageSelectorType | undefined;
  DestinationConfig: ImageGenerationDestinationConfig | undefined;
  SamplingInterval: number | undefined;
  Format: Format | undefined;
  FormatConfig?: Partial<Record<FormatConfigKey, string>>;
  WidthPixels?: number;
  HeightPixels?: number;
}
export interface DescribeImageGenerationConfigurationOutput {
  ImageGenerationConfiguration?: ImageGenerationConfiguration;
}
export interface DescribeMappedResourceConfigurationInput {
  StreamName?: string;
  StreamARN?: string;
  MaxResults?: number;
  NextToken?: string;
}
export interface MappedResourceConfigurationListItem {
  Type?: string;
  ARN?: string;
}
export interface DescribeMappedResourceConfigurationOutput {
  MappedResourceConfigurationList?: MappedResourceConfigurationListItem[];
  NextToken?: string;
}
export interface DescribeMediaStorageConfigurationInput {
  ChannelName?: string;
  ChannelARN?: string;
}
export declare const MediaStorageConfigurationStatus: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type MediaStorageConfigurationStatus =
  (typeof MediaStorageConfigurationStatus)[keyof typeof MediaStorageConfigurationStatus];
export interface MediaStorageConfiguration {
  StreamARN?: string;
  Status: MediaStorageConfigurationStatus | undefined;
}
export interface DescribeMediaStorageConfigurationOutput {
  MediaStorageConfiguration?: MediaStorageConfiguration;
}
export interface DescribeNotificationConfigurationInput {
  StreamName?: string;
  StreamARN?: string;
}
export interface NotificationDestinationConfig {
  Uri: string | undefined;
}
export interface NotificationConfiguration {
  Status: ConfigurationStatus | undefined;
  DestinationConfig: NotificationDestinationConfig | undefined;
}
export interface DescribeNotificationConfigurationOutput {
  NotificationConfiguration?: NotificationConfiguration;
}
export interface DescribeSignalingChannelInput {
  ChannelName?: string;
  ChannelARN?: string;
}
export interface DescribeSignalingChannelOutput {
  ChannelInfo?: ChannelInfo;
}
export interface DescribeStreamInput {
  StreamName?: string;
  StreamARN?: string;
}
export interface StreamInfo {
  DeviceName?: string;
  StreamName?: string;
  StreamARN?: string;
  MediaType?: string;
  KmsKeyId?: string;
  Version?: string;
  Status?: Status;
  CreationTime?: Date;
  DataRetentionInHours?: number;
}
export interface DescribeStreamOutput {
  StreamInfo?: StreamInfo;
}
export interface GetDataEndpointInput {
  StreamName?: string;
  StreamARN?: string;
  APIName: APIName | undefined;
}
export interface GetDataEndpointOutput {
  DataEndpoint?: string;
}
export interface SingleMasterChannelEndpointConfiguration {
  Protocols?: ChannelProtocol[];
  Role?: ChannelRole;
}
export interface GetSignalingChannelEndpointInput {
  ChannelARN: string | undefined;
  SingleMasterChannelEndpointConfiguration?: SingleMasterChannelEndpointConfiguration;
}
export interface ResourceEndpointListItem {
  Protocol?: ChannelProtocol;
  ResourceEndpoint?: string;
}
export interface GetSignalingChannelEndpointOutput {
  ResourceEndpointList?: ResourceEndpointListItem[];
}
export declare class InvalidResourceFormatException extends __BaseException {
  readonly name: "InvalidResourceFormatException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<InvalidResourceFormatException, __BaseException>
  );
}
export interface ListEdgeAgentConfigurationsInput {
  HubDeviceArn: string | undefined;
  MaxResults?: number;
  NextToken?: string;
}
export interface ListEdgeAgentConfigurationsEdgeConfig {
  StreamName?: string;
  StreamARN?: string;
  CreationTime?: Date;
  LastUpdatedTime?: Date;
  SyncStatus?: SyncStatus;
  FailedStatusDetails?: string;
  EdgeConfig?: EdgeConfig;
}
export interface ListEdgeAgentConfigurationsOutput {
  EdgeConfigs?: ListEdgeAgentConfigurationsEdgeConfig[];
  NextToken?: string;
}
export interface ListSignalingChannelsInput {
  MaxResults?: number;
  NextToken?: string;
  ChannelNameCondition?: ChannelNameCondition;
}
export interface ListSignalingChannelsOutput {
  ChannelInfoList?: ChannelInfo[];
  NextToken?: string;
}
export interface StreamNameCondition {
  ComparisonOperator?: ComparisonOperator;
  ComparisonValue?: string;
}
export interface ListStreamsInput {
  MaxResults?: number;
  NextToken?: string;
  StreamNameCondition?: StreamNameCondition;
}
export interface ListStreamsOutput {
  StreamInfoList?: StreamInfo[];
  NextToken?: string;
}
export interface ListTagsForResourceInput {
  NextToken?: string;
  ResourceARN: string | undefined;
}
export interface ListTagsForResourceOutput {
  NextToken?: string;
  Tags?: Record<string, string>;
}
export interface ListTagsForStreamInput {
  NextToken?: string;
  StreamARN?: string;
  StreamName?: string;
}
export interface ListTagsForStreamOutput {
  NextToken?: string;
  Tags?: Record<string, string>;
}
export declare class NoDataRetentionException extends __BaseException {
  readonly name: "NoDataRetentionException";
  readonly $fault: "client";
  Message?: string;
  constructor(
    opts: __ExceptionOptionType<NoDataRetentionException, __BaseException>
  );
}
export interface StartEdgeConfigurationUpdateInput {
  StreamName?: string;
  StreamARN?: string;
  EdgeConfig: EdgeConfig | undefined;
}
export interface StartEdgeConfigurationUpdateOutput {
  StreamName?: string;
  StreamARN?: string;
  CreationTime?: Date;
  LastUpdatedTime?: Date;
  SyncStatus?: SyncStatus;
  FailedStatusDetails?: string;
  EdgeConfig?: EdgeConfig;
}
export interface TagResourceInput {
  ResourceARN: string | undefined;
  Tags: Tag[] | undefined;
}
export interface TagResourceOutput {}
export interface TagStreamInput {
  StreamARN?: string;
  StreamName?: string;
  Tags: Record<string, string> | undefined;
}
export interface TagStreamOutput {}
export interface UntagResourceInput {
  ResourceARN: string | undefined;
  TagKeyList: string[] | undefined;
}
export interface UntagResourceOutput {}
export interface UntagStreamInput {
  StreamARN?: string;
  StreamName?: string;
  TagKeyList: string[] | undefined;
}
export interface UntagStreamOutput {}
export declare const UpdateDataRetentionOperation: {
  readonly DECREASE_DATA_RETENTION: "DECREASE_DATA_RETENTION";
  readonly INCREASE_DATA_RETENTION: "INCREASE_DATA_RETENTION";
};
export type UpdateDataRetentionOperation =
  (typeof UpdateDataRetentionOperation)[keyof typeof UpdateDataRetentionOperation];
export interface UpdateDataRetentionInput {
  StreamName?: string;
  StreamARN?: string;
  CurrentVersion: string | undefined;
  Operation: UpdateDataRetentionOperation | undefined;
  DataRetentionChangeInHours: number | undefined;
}
export interface UpdateDataRetentionOutput {}
export interface UpdateImageGenerationConfigurationInput {
  StreamName?: string;
  StreamARN?: string;
  ImageGenerationConfiguration?: ImageGenerationConfiguration;
}
export interface UpdateImageGenerationConfigurationOutput {}
export interface UpdateMediaStorageConfigurationInput {
  ChannelARN: string | undefined;
  MediaStorageConfiguration: MediaStorageConfiguration | undefined;
}
export interface UpdateMediaStorageConfigurationOutput {}
export interface UpdateNotificationConfigurationInput {
  StreamName?: string;
  StreamARN?: string;
  NotificationConfiguration?: NotificationConfiguration;
}
export interface UpdateNotificationConfigurationOutput {}
export interface UpdateSignalingChannelInput {
  ChannelARN: string | undefined;
  CurrentVersion: string | undefined;
  SingleMasterConfiguration?: SingleMasterConfiguration;
}
export interface UpdateSignalingChannelOutput {}
export interface UpdateStreamInput {
  StreamName?: string;
  StreamARN?: string;
  CurrentVersion: string | undefined;
  DeviceName?: string;
  MediaType?: string;
}
export interface UpdateStreamOutput {}
export declare const MediaSourceConfigFilterSensitiveLog: (
  obj: MediaSourceConfig
) => any;
export declare const RecorderConfigFilterSensitiveLog: (
  obj: RecorderConfig
) => any;
export declare const EdgeConfigFilterSensitiveLog: (obj: EdgeConfig) => any;
export declare const DescribeEdgeConfigurationOutputFilterSensitiveLog: (
  obj: DescribeEdgeConfigurationOutput
) => any;
export declare const ListEdgeAgentConfigurationsEdgeConfigFilterSensitiveLog: (
  obj: ListEdgeAgentConfigurationsEdgeConfig
) => any;
export declare const ListEdgeAgentConfigurationsOutputFilterSensitiveLog: (
  obj: ListEdgeAgentConfigurationsOutput
) => any;
export declare const StartEdgeConfigurationUpdateInputFilterSensitiveLog: (
  obj: StartEdgeConfigurationUpdateInput
) => any;
export declare const StartEdgeConfigurationUpdateOutputFilterSensitiveLog: (
  obj: StartEdgeConfigurationUpdateOutput
) => any;
