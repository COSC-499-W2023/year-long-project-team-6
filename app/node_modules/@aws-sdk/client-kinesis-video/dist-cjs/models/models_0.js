"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartEdgeConfigurationUpdateOutputFilterSensitiveLog = exports.StartEdgeConfigurationUpdateInputFilterSensitiveLog = exports.ListEdgeAgentConfigurationsOutputFilterSensitiveLog = exports.ListEdgeAgentConfigurationsEdgeConfigFilterSensitiveLog = exports.DescribeEdgeConfigurationOutputFilterSensitiveLog = exports.EdgeConfigFilterSensitiveLog = exports.RecorderConfigFilterSensitiveLog = exports.MediaSourceConfigFilterSensitiveLog = exports.UpdateDataRetentionOperation = exports.NoDataRetentionException = exports.InvalidResourceFormatException = exports.MediaStorageConfigurationStatus = exports.ImageSelectorType = exports.FormatConfigKey = exports.Format = exports.SyncStatus = exports.MediaUriType = exports.UploaderStatus = exports.RecorderStatus = exports.StrategyOnFullSize = exports.NotAuthorizedException = exports.VersionMismatchException = exports.StreamEdgeConfigurationNotFoundException = exports.ResourceNotFoundException = exports.InvalidDeviceException = exports.DeviceStreamLimitExceededException = exports.TagsPerResourceExceededLimitException = exports.ResourceInUseException = exports.InvalidArgumentException = exports.ConfigurationStatus = exports.ClientLimitExceededException = exports.ChannelRole = exports.ChannelProtocol = exports.ComparisonOperator = exports.ChannelType = exports.Status = exports.APIName = exports.AccountStreamLimitExceededException = exports.AccountChannelLimitExceededException = exports.AccessDeniedException = void 0;
const smithy_client_1 = require("@smithy/smithy-client");
const KinesisVideoServiceException_1 = require("./KinesisVideoServiceException");
class AccessDeniedException extends KinesisVideoServiceException_1.KinesisVideoServiceException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
exports.AccessDeniedException = AccessDeniedException;
class AccountChannelLimitExceededException extends KinesisVideoServiceException_1.KinesisVideoServiceException {
    constructor(opts) {
        super({
            name: "AccountChannelLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccountChannelLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccountChannelLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.AccountChannelLimitExceededException = AccountChannelLimitExceededException;
class AccountStreamLimitExceededException extends KinesisVideoServiceException_1.KinesisVideoServiceException {
    constructor(opts) {
        super({
            name: "AccountStreamLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccountStreamLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccountStreamLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.AccountStreamLimitExceededException = AccountStreamLimitExceededException;
exports.APIName = {
    GET_CLIP: "GET_CLIP",
    GET_DASH_STREAMING_SESSION_URL: "GET_DASH_STREAMING_SESSION_URL",
    GET_HLS_STREAMING_SESSION_URL: "GET_HLS_STREAMING_SESSION_URL",
    GET_IMAGES: "GET_IMAGES",
    GET_MEDIA: "GET_MEDIA",
    GET_MEDIA_FOR_FRAGMENT_LIST: "GET_MEDIA_FOR_FRAGMENT_LIST",
    LIST_FRAGMENTS: "LIST_FRAGMENTS",
    PUT_MEDIA: "PUT_MEDIA",
};
exports.Status = {
    ACTIVE: "ACTIVE",
    CREATING: "CREATING",
    DELETING: "DELETING",
    UPDATING: "UPDATING",
};
exports.ChannelType = {
    FULL_MESH: "FULL_MESH",
    SINGLE_MASTER: "SINGLE_MASTER",
};
exports.ComparisonOperator = {
    BEGINS_WITH: "BEGINS_WITH",
};
exports.ChannelProtocol = {
    HTTPS: "HTTPS",
    WEBRTC: "WEBRTC",
    WSS: "WSS",
};
exports.ChannelRole = {
    MASTER: "MASTER",
    VIEWER: "VIEWER",
};
class ClientLimitExceededException extends KinesisVideoServiceException_1.KinesisVideoServiceException {
    constructor(opts) {
        super({
            name: "ClientLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ClientLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ClientLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.ClientLimitExceededException = ClientLimitExceededException;
exports.ConfigurationStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
class InvalidArgumentException extends KinesisVideoServiceException_1.KinesisVideoServiceException {
    constructor(opts) {
        super({
            name: "InvalidArgumentException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidArgumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidArgumentException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidArgumentException = InvalidArgumentException;
class ResourceInUseException extends KinesisVideoServiceException_1.KinesisVideoServiceException {
    constructor(opts) {
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceInUseException = ResourceInUseException;
class TagsPerResourceExceededLimitException extends KinesisVideoServiceException_1.KinesisVideoServiceException {
    constructor(opts) {
        super({
            name: "TagsPerResourceExceededLimitException",
            $fault: "client",
            ...opts,
        });
        this.name = "TagsPerResourceExceededLimitException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TagsPerResourceExceededLimitException.prototype);
        this.Message = opts.Message;
    }
}
exports.TagsPerResourceExceededLimitException = TagsPerResourceExceededLimitException;
class DeviceStreamLimitExceededException extends KinesisVideoServiceException_1.KinesisVideoServiceException {
    constructor(opts) {
        super({
            name: "DeviceStreamLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "DeviceStreamLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeviceStreamLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.DeviceStreamLimitExceededException = DeviceStreamLimitExceededException;
class InvalidDeviceException extends KinesisVideoServiceException_1.KinesisVideoServiceException {
    constructor(opts) {
        super({
            name: "InvalidDeviceException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidDeviceException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidDeviceException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidDeviceException = InvalidDeviceException;
class ResourceNotFoundException extends KinesisVideoServiceException_1.KinesisVideoServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
class StreamEdgeConfigurationNotFoundException extends KinesisVideoServiceException_1.KinesisVideoServiceException {
    constructor(opts) {
        super({
            name: "StreamEdgeConfigurationNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "StreamEdgeConfigurationNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, StreamEdgeConfigurationNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.StreamEdgeConfigurationNotFoundException = StreamEdgeConfigurationNotFoundException;
class VersionMismatchException extends KinesisVideoServiceException_1.KinesisVideoServiceException {
    constructor(opts) {
        super({
            name: "VersionMismatchException",
            $fault: "client",
            ...opts,
        });
        this.name = "VersionMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, VersionMismatchException.prototype);
        this.Message = opts.Message;
    }
}
exports.VersionMismatchException = VersionMismatchException;
class NotAuthorizedException extends KinesisVideoServiceException_1.KinesisVideoServiceException {
    constructor(opts) {
        super({
            name: "NotAuthorizedException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotAuthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotAuthorizedException.prototype);
        this.Message = opts.Message;
    }
}
exports.NotAuthorizedException = NotAuthorizedException;
exports.StrategyOnFullSize = {
    DELETE_OLDEST_MEDIA: "DELETE_OLDEST_MEDIA",
    DENY_NEW_MEDIA: "DENY_NEW_MEDIA",
};
exports.RecorderStatus = {
    SUCCESS: "SUCCESS",
    SYSTEM_ERROR: "SYSTEM_ERROR",
    USER_ERROR: "USER_ERROR",
};
exports.UploaderStatus = {
    SUCCESS: "SUCCESS",
    SYSTEM_ERROR: "SYSTEM_ERROR",
    USER_ERROR: "USER_ERROR",
};
exports.MediaUriType = {
    FILE_URI: "FILE_URI",
    RTSP_URI: "RTSP_URI",
};
exports.SyncStatus = {
    ACKNOWLEDGED: "ACKNOWLEDGED",
    DELETE_FAILED: "DELETE_FAILED",
    DELETING: "DELETING",
    DELETING_ACKNOWLEDGED: "DELETING_ACKNOWLEDGED",
    IN_SYNC: "IN_SYNC",
    SYNCING: "SYNCING",
    SYNC_FAILED: "SYNC_FAILED",
};
exports.Format = {
    JPEG: "JPEG",
    PNG: "PNG",
};
exports.FormatConfigKey = {
    JPEGQuality: "JPEGQuality",
};
exports.ImageSelectorType = {
    PRODUCER_TIMESTAMP: "PRODUCER_TIMESTAMP",
    SERVER_TIMESTAMP: "SERVER_TIMESTAMP",
};
exports.MediaStorageConfigurationStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
class InvalidResourceFormatException extends KinesisVideoServiceException_1.KinesisVideoServiceException {
    constructor(opts) {
        super({
            name: "InvalidResourceFormatException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidResourceFormatException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidResourceFormatException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidResourceFormatException = InvalidResourceFormatException;
class NoDataRetentionException extends KinesisVideoServiceException_1.KinesisVideoServiceException {
    constructor(opts) {
        super({
            name: "NoDataRetentionException",
            $fault: "client",
            ...opts,
        });
        this.name = "NoDataRetentionException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoDataRetentionException.prototype);
        this.Message = opts.Message;
    }
}
exports.NoDataRetentionException = NoDataRetentionException;
exports.UpdateDataRetentionOperation = {
    DECREASE_DATA_RETENTION: "DECREASE_DATA_RETENTION",
    INCREASE_DATA_RETENTION: "INCREASE_DATA_RETENTION",
};
const MediaSourceConfigFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.MediaUriSecretArn && { MediaUriSecretArn: smithy_client_1.SENSITIVE_STRING }),
});
exports.MediaSourceConfigFilterSensitiveLog = MediaSourceConfigFilterSensitiveLog;
const RecorderConfigFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.MediaSourceConfig && { MediaSourceConfig: (0, exports.MediaSourceConfigFilterSensitiveLog)(obj.MediaSourceConfig) }),
});
exports.RecorderConfigFilterSensitiveLog = RecorderConfigFilterSensitiveLog;
const EdgeConfigFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.RecorderConfig && { RecorderConfig: (0, exports.RecorderConfigFilterSensitiveLog)(obj.RecorderConfig) }),
});
exports.EdgeConfigFilterSensitiveLog = EdgeConfigFilterSensitiveLog;
const DescribeEdgeConfigurationOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EdgeConfig && { EdgeConfig: (0, exports.EdgeConfigFilterSensitiveLog)(obj.EdgeConfig) }),
});
exports.DescribeEdgeConfigurationOutputFilterSensitiveLog = DescribeEdgeConfigurationOutputFilterSensitiveLog;
const ListEdgeAgentConfigurationsEdgeConfigFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EdgeConfig && { EdgeConfig: (0, exports.EdgeConfigFilterSensitiveLog)(obj.EdgeConfig) }),
});
exports.ListEdgeAgentConfigurationsEdgeConfigFilterSensitiveLog = ListEdgeAgentConfigurationsEdgeConfigFilterSensitiveLog;
const ListEdgeAgentConfigurationsOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EdgeConfigs && {
        EdgeConfigs: obj.EdgeConfigs.map((item) => (0, exports.ListEdgeAgentConfigurationsEdgeConfigFilterSensitiveLog)(item)),
    }),
});
exports.ListEdgeAgentConfigurationsOutputFilterSensitiveLog = ListEdgeAgentConfigurationsOutputFilterSensitiveLog;
const StartEdgeConfigurationUpdateInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EdgeConfig && { EdgeConfig: (0, exports.EdgeConfigFilterSensitiveLog)(obj.EdgeConfig) }),
});
exports.StartEdgeConfigurationUpdateInputFilterSensitiveLog = StartEdgeConfigurationUpdateInputFilterSensitiveLog;
const StartEdgeConfigurationUpdateOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.EdgeConfig && { EdgeConfig: (0, exports.EdgeConfigFilterSensitiveLog)(obj.EdgeConfig) }),
});
exports.StartEdgeConfigurationUpdateOutputFilterSensitiveLog = StartEdgeConfigurationUpdateOutputFilterSensitiveLog;
