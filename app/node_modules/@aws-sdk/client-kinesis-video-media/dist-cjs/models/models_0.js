"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetMediaOutputFilterSensitiveLog = exports.ResourceNotFoundException = exports.NotAuthorizedException = exports.InvalidEndpointException = exports.InvalidArgumentException = exports.StartSelectorType = exports.ConnectionLimitExceededException = exports.ClientLimitExceededException = void 0;
const KinesisVideoMediaServiceException_1 = require("./KinesisVideoMediaServiceException");
class ClientLimitExceededException extends KinesisVideoMediaServiceException_1.KinesisVideoMediaServiceException {
    constructor(opts) {
        super({
            name: "ClientLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ClientLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ClientLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.ClientLimitExceededException = ClientLimitExceededException;
class ConnectionLimitExceededException extends KinesisVideoMediaServiceException_1.KinesisVideoMediaServiceException {
    constructor(opts) {
        super({
            name: "ConnectionLimitExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConnectionLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConnectionLimitExceededException.prototype);
        this.Message = opts.Message;
    }
}
exports.ConnectionLimitExceededException = ConnectionLimitExceededException;
exports.StartSelectorType = {
    CONTINUATION_TOKEN: "CONTINUATION_TOKEN",
    EARLIEST: "EARLIEST",
    FRAGMENT_NUMBER: "FRAGMENT_NUMBER",
    NOW: "NOW",
    PRODUCER_TIMESTAMP: "PRODUCER_TIMESTAMP",
    SERVER_TIMESTAMP: "SERVER_TIMESTAMP",
};
class InvalidArgumentException extends KinesisVideoMediaServiceException_1.KinesisVideoMediaServiceException {
    constructor(opts) {
        super({
            name: "InvalidArgumentException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidArgumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidArgumentException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidArgumentException = InvalidArgumentException;
class InvalidEndpointException extends KinesisVideoMediaServiceException_1.KinesisVideoMediaServiceException {
    constructor(opts) {
        super({
            name: "InvalidEndpointException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidEndpointException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidEndpointException.prototype);
        this.Message = opts.Message;
    }
}
exports.InvalidEndpointException = InvalidEndpointException;
class NotAuthorizedException extends KinesisVideoMediaServiceException_1.KinesisVideoMediaServiceException {
    constructor(opts) {
        super({
            name: "NotAuthorizedException",
            $fault: "client",
            ...opts,
        });
        this.name = "NotAuthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotAuthorizedException.prototype);
        this.Message = opts.Message;
    }
}
exports.NotAuthorizedException = NotAuthorizedException;
class ResourceNotFoundException extends KinesisVideoMediaServiceException_1.KinesisVideoMediaServiceException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
exports.ResourceNotFoundException = ResourceNotFoundException;
const GetMediaOutputFilterSensitiveLog = (obj) => ({
    ...obj,
});
exports.GetMediaOutputFilterSensitiveLog = GetMediaOutputFilterSensitiveLog;
